<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DefaultEcs</name>
    </assembly>
    <members>
        <member name="T:DefaultEcs.AoTHelper">
            <summary>
            Provides a set of methods to help the generation of generic code for AoT compilation.
            </summary>
        </member>
        <member name="M:DefaultEcs.AoTHelper.RegisterMessage``1">
            <summary>
            Registers the type <typeparamref name="T"/> so <see cref="T:DefaultEcs.SubscribeAttribute"/> can freely be used on method like the delegate <see cref="T:DefaultEcs.MessageHandler`1"/> to automatically subscribe when using <see cref="T:DefaultEcs.IPublisherExtension"/> on a <see cref="T:DefaultEcs.World"/> instance.
            </summary>
            <typeparam name="T">The type of message.</typeparam>
        </member>
        <member name="M:DefaultEcs.AoTHelper.RegisterComponent``1">
            <summary>
            Registers the type <typeparamref name="T"/> so it can freely be used in <see cref="T:DefaultEcs.System.ComponentAttribute"/>.
            </summary>
            <typeparam name="T">The type of component.</typeparam>
        </member>
        <member name="M:DefaultEcs.AoTHelper.RegisterUnmanagedComponent``1">
            <summary>
            Registers the unmanaged type <typeparamref name="T"/> so it can freely be used in <see cref="T:DefaultEcs.System.ComponentAttribute"/> and by <see cref="M:DefaultEcs.Command.EntityRecord.Set``1(``0@)"/>.
            </summary>
            <typeparam name="T">The type of component.</typeparam>
        </member>
        <member name="T:DefaultEcs.Command.EntityCommandRecorder">
            <summary>
            Represents a buffer of structural modifications to apply on <see cref="T:DefaultEcs.Entity"/> to record as postoned commands.
            </summary>
        </member>
        <member name="P:DefaultEcs.Command.EntityCommandRecorder.MaxCapacity">
            <summary>
            Gets the maximum capacity the current instance can grow to.
            </summary>
        </member>
        <member name="P:DefaultEcs.Command.EntityCommandRecorder.Capacity">
            <summary>
            Gets current capacity of the current instance.
            </summary>
        </member>
        <member name="P:DefaultEcs.Command.EntityCommandRecorder.Size">
            <summary>
            Gets the size taken by recorded commands in current instance.
            </summary>
        </member>
        <member name="M:DefaultEcs.Command.EntityCommandRecorder.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates an <see cref="T:DefaultEcs.Command.EntityCommandRecorder"/> with a custom default size which can grow to a maximum capacity.
            </summary>
            <param name="capacity">The default size of the <see cref="T:DefaultEcs.Command.EntityCommandRecorder"/>.</param>
            <param name="maxCapacity">The maximum capacity of the <see cref="T:DefaultEcs.Command.EntityCommandRecorder"/>.</param>
            <exception cref="T:System.ArgumentException"><paramref name="capacity"/> cannot be negative.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="maxCapacity"/> cannot be negative.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="maxCapacity"/> is inferior to <paramref name="capacity"/>.</exception>
        </member>
        <member name="M:DefaultEcs.Command.EntityCommandRecorder.#ctor(System.Int32)">
            <summary>
            Creates a fixed sized <see cref="T:DefaultEcs.Command.EntityCommandRecorder"/>.
            </summary>
            <param name="maxCapacity">The size of the <see cref="T:DefaultEcs.Command.EntityCommandRecorder"/>.</param>
            <exception cref="T:System.ArgumentException"><paramref name="maxCapacity"/> cannot be negative.</exception>
        </member>
        <member name="M:DefaultEcs.Command.EntityCommandRecorder.#ctor">
            <summary>
            Creates a default sized <see cref="T:DefaultEcs.Command.EntityCommandRecorder"/> of 1ko which can grow as needed.
            </summary>
        </member>
        <member name="M:DefaultEcs.Command.EntityCommandRecorder.Record(DefaultEcs.World)">
            <summary>
            Gives an <see cref="T:DefaultEcs.Command.WorldRecord"/> to record action on the given <see cref="T:DefaultEcs.World"/>.
            </summary>
            <param name="world">The <see cref="T:DefaultEcs.World"/> to record action for.</param>
            <returns>The <see cref="T:DefaultEcs.Command.WorldRecord"/> used to record actions on the given <see cref="T:DefaultEcs.World"/>.</returns>
        </member>
        <member name="M:DefaultEcs.Command.EntityCommandRecorder.Record(DefaultEcs.Entity@)">
            <summary>
            Gives an <see cref="T:DefaultEcs.Command.EntityRecord"/> to record action on the given <see cref="T:DefaultEcs.Entity"/>.
            This command takes 9 bytes.
            </summary>
            <param name="entity">The <see cref="T:DefaultEcs.Entity"/> to record action for.</param>
            <returns>The <see cref="T:DefaultEcs.Command.EntityRecord"/> used to record actions on the given <see cref="T:DefaultEcs.Entity"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Command buffer is full.</exception>
        </member>
        <member name="M:DefaultEcs.Command.EntityCommandRecorder.Execute">
            <summary>
            Executes all recorded commands and clears those commands.
            </summary>
        </member>
        <member name="M:DefaultEcs.Command.EntityCommandRecorder.Clear">
            <summary>
            Clears all recorded commands.
            </summary>
        </member>
        <member name="M:DefaultEcs.Command.EntityCommandRecorder.Dispose">
            <summary>
            Releases inner unmanaged resources.
            </summary>
        </member>
        <member name="T:DefaultEcs.Command.EntityRecord">
            <summary>
            Represents an <see cref="T:DefaultEcs.Entity"/> on which to create commands to record in a <see cref="T:DefaultEcs.Command.EntityCommandRecorder"/>.
            </summary>
        </member>
        <member name="M:DefaultEcs.Command.EntityRecord.Enable">
            <summary>
            Enables the corresponding <see cref="T:DefaultEcs.Entity"/> so it can appear in <see cref="T:DefaultEcs.EntitySet"/>.
            This command takes 5 bytes.
            </summary>
            <exception cref="T:System.InvalidOperationException">Command buffer is full.</exception>
        </member>
        <member name="M:DefaultEcs.Command.EntityRecord.Disable">
            <summary>
            Disables the corresponding <see cref="T:DefaultEcs.Entity"/> so it does not appear in <see cref="T:DefaultEcs.EntitySet"/>.
            This command takes 5 bytes.
            </summary>
            <exception cref="T:System.InvalidOperationException">Command buffer is full.</exception>
        </member>
        <member name="M:DefaultEcs.Command.EntityRecord.Enable``1">
            <summary>
            Enables the corresponding <see cref="T:DefaultEcs.Entity"/> component of type <typeparamref name="T"/> so it can appear in <see cref="T:DefaultEcs.EntitySet"/>.
            Does nothing if corresponding <see cref="T:DefaultEcs.Entity"/> does not have a component of type <typeparamref name="T"/>.
            This command takes 9 bytes.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <exception cref="T:System.InvalidOperationException">Command buffer is full.</exception>
        </member>
        <member name="M:DefaultEcs.Command.EntityRecord.Disable``1">
            <summary>
            Disables the corresponding <see cref="T:DefaultEcs.Entity"/> component of type <typeparamref name="T"/> so it does not appear in <see cref="T:DefaultEcs.EntitySet"/>.
            This command takes 9 bytes.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <exception cref="T:System.InvalidOperationException">Command buffer is full.</exception>
        </member>
        <member name="M:DefaultEcs.Command.EntityRecord.Set``1(``0@)">
            <summary>
            Sets the value of the component of type <typeparamref name="T"/> on the corresponding <see cref="T:DefaultEcs.Entity"/>.
            For a blittable component, this command takes 9 bytes + the size of the component.
            For non blittable component, this command takes 13 bytes and may cause some allocation because of boxing on struct component type.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <param name="component">The value of the component.</param>
            <exception cref="T:System.InvalidOperationException">Command buffer is full.</exception>
        </member>
        <member name="M:DefaultEcs.Command.EntityRecord.Set``1">
            <summary>
            Sets the value of the component of type <typeparamref name="T"/> to its default value on the corresponding <see cref="T:DefaultEcs.Entity"/>.
            For a blittable component, this command takes 9 bytes + the size of the component.
            For non blittable component, this command takes 13 bytes and may cause some allocation because of boxing on struct component type.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <exception cref="T:System.InvalidOperationException">Command buffer is full.</exception>
        </member>
        <member name="M:DefaultEcs.Command.EntityRecord.SetSameAs``1(DefaultEcs.Command.EntityRecord@)">
            <summary>
            Sets the value of the component of type <typeparamref name="T"/> on the corresponding <see cref="T:DefaultEcs.Entity"/> to the same instance of an other <see cref="T:DefaultEcs.Command.EntityRecord"/>.
            This command takes 13 bytes.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <param name="reference">The other <see cref="T:DefaultEcs.Command.EntityRecord"/> used as reference.</param>
            <exception cref="T:System.InvalidOperationException">Command buffer is full.</exception>
        </member>
        <member name="M:DefaultEcs.Command.EntityRecord.SetSameAsWorld``1">
            <summary>
            Sets the value of the component of type <typeparamref name="T"/> on the corresponding <see cref="T:DefaultEcs.Entity"/> to the same instance of its <see cref="T:DefaultEcs.World"/>.
            This command takes 9 bytes.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <exception cref="T:System.InvalidOperationException">Command buffer is full.</exception>
        </member>
        <member name="M:DefaultEcs.Command.EntityRecord.Remove``1">
            <summary>
            Removes the component of type <typeparamref name="T"/> on the corresponding <see cref="T:DefaultEcs.Entity"/>.
            This command takes 9 bytes.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <exception cref="T:System.InvalidOperationException">Command buffer is full.</exception>
        </member>
        <member name="M:DefaultEcs.Command.EntityRecord.NotifyChanged``1">
            <summary>
            Notifies the value of the component of type <typeparamref name="T"/> has changed on the corresponding <see cref="T:DefaultEcs.Entity"/>.
            This command takes 9 bytes.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <exception cref="T:System.InvalidOperationException">Command buffer is full.</exception>
        </member>
        <member name="M:DefaultEcs.Command.EntityRecord.CopyTo(DefaultEcs.World,DefaultEcs.ComponentCloner)">
            <summary>
            Creates a copy of current <see cref="T:DefaultEcs.Command.EntityRecord"/> with all of its components in the given <see cref="T:DefaultEcs.World"/> using the given <see cref="T:DefaultEcs.ComponentCloner"/>.
            </summary>
            <param name="world">The <see cref="T:DefaultEcs.World"/> instance to which copy current <see cref="T:DefaultEcs.Command.EntityRecord"/> and its components.</param>
            <param name="cloner">The <see cref="T:DefaultEcs.ComponentCloner"/> to use to copy the components.</param>
            <returns>The created <see cref="T:DefaultEcs.Command.EntityRecord"/> in the given <see cref="T:DefaultEcs.World"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="world"/> or <paramref name="cloner"/> was null.</exception>
        </member>
        <member name="M:DefaultEcs.Command.EntityRecord.CopyTo(DefaultEcs.World)">
            <summary>
            Creates a copy of current <see cref="T:DefaultEcs.Command.EntityRecord"/> with all of its components in the given <see cref="T:DefaultEcs.World"/>.
            </summary>
            <param name="world">The <see cref="T:DefaultEcs.World"/> instance to which copy current <see cref="T:DefaultEcs.Command.EntityRecord"/> and its components.</param>
            <returns>The created <see cref="T:DefaultEcs.Command.EntityRecord"/> in the given <see cref="T:DefaultEcs.World"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="world"/> was null.</exception>
        </member>
        <member name="M:DefaultEcs.Command.EntityRecord.Dispose">
            <summary>
            Clean the corresponding <see cref="T:DefaultEcs.Entity"/> of all its components.
            The current <see cref="T:DefaultEcs.Command.EntityRecord"/> should not be used again after calling this method.
            This command takes 5 bytes.
            </summary>
            <exception cref="T:System.InvalidOperationException">Command buffer is full.</exception>
        </member>
        <member name="T:DefaultEcs.Command.WorldRecord">
            <summary>
            Represents a <see cref="T:DefaultEcs.World"/> on which to create commands to record in a <see cref="T:DefaultEcs.Command.EntityCommandRecorder"/>.
            </summary>
        </member>
        <member name="M:DefaultEcs.Command.WorldRecord.CreateEntity">
            <summary>
            Records the creation of an <see cref="T:DefaultEcs.Entity"/> on a <see cref="T:DefaultEcs.World"/> and returns an <see cref="T:DefaultEcs.Command.EntityRecord"/> to record action on it.
            This command takes 9 bytes.
            </summary>
            <returns>The <see cref="T:DefaultEcs.Command.EntityRecord"/> used to record actions on the later created <see cref="T:DefaultEcs.Entity"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Command buffer is full.</exception>
        </member>
        <member name="M:DefaultEcs.Command.WorldRecord.Set``1(``0@)">
            <summary>
            Sets the value of the component of type <typeparamref name="T"/> on the corresponding <see cref="T:DefaultEcs.World"/>.
            For a blittable component, this command takes 7 bytes + the size of the component.
            For non blittable component, this command takes 11 bytes and may cause some allocation because of boxing on struct component type.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <param name="component">The value of the component.</param>
            <exception cref="T:System.InvalidOperationException">Command buffer is full.</exception>
        </member>
        <member name="M:DefaultEcs.Command.WorldRecord.Set``1">
            <summary>
            Sets the value of the component of type <typeparamref name="T"/> to its default value on the corresponding <see cref="T:DefaultEcs.World"/>.
            For a blittable component, this command takes 7 bytes + the size of the component.
            For non blittable component, this command takes 11 bytes and may cause some allocation because of boxing on struct component type.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <exception cref="T:System.InvalidOperationException">Command buffer is full.</exception>
        </member>
        <member name="M:DefaultEcs.Command.WorldRecord.Remove``1">
            <summary>
            Removes the component of type <typeparamref name="T"/> on the corresponding <see cref="T:DefaultEcs.World"/>.
            This command takes 7 bytes.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <exception cref="T:System.InvalidOperationException">Command buffer is full.</exception>
        </member>
        <member name="T:DefaultEcs.Command.NamespaceDoc">
            <summary>
            The <see cref="N:DefaultEcs.Command"/> namespace contains types used in the recording and deferred execution of modifications on entities.
            </summary>
        </member>
        <member name="T:DefaultEcs.ComponentCloner">
            <summary>
            Exposes a way to clone one <see cref="T:DefaultEcs.Entity"/> components to an other.
            </summary>
        </member>
        <member name="M:DefaultEcs.ComponentCloner.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:DefaultEcs.ComponentCloner"/> type.
            </summary>
        </member>
        <member name="M:DefaultEcs.ComponentCloner.Set``1(``0@,System.Boolean)">
            <summary>
            Sets the given component on the copied entity.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <param name="component">The value of the component.</param>
            <param name="isEnabled">Whether the component is enabled or not on the source <see cref="T:DefaultEcs.Entity"/>.</param>
        </member>
        <member name="M:DefaultEcs.ComponentCloner.OnComponent``1(``0@,System.Boolean)">
            <summary>
            Handles the component of type <typeparamref name="T"/> from the source <see cref="T:DefaultEcs.Entity"/>.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <param name="component">The value of the component.</param>
            <param name="isEnabled">Whether the component is enabled or not on the source <see cref="T:DefaultEcs.Entity"/>.</param>
        </member>
        <member name="M:DefaultEcs.ComponentCloner.Clone(DefaultEcs.Entity@,DefaultEcs.Entity@)">
            <summary>
            Clones one <see cref="T:DefaultEcs.Entity"/> components to an other.
            </summary>
            <param name="from">The source <see cref="T:DefaultEcs.Entity"/>.</param>
            <param name="to">The target <see cref="T:DefaultEcs.Entity"/>.</param>
        </member>
        <member name="T:DefaultEcs.Components`1">
            <summary>
            Provides a fast access to the components of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
        </member>
        <member name="P:DefaultEcs.Components`1.Item(DefaultEcs.Entity)">
            <summary>
            Gets the component of type <typeparamref name="T"/> on the provided <see cref="T:DefaultEcs.Entity"/>.
            </summary>
            <param name="entity">The <see cref="T:DefaultEcs.Entity"/> for which to get the component of type <typeparamref name="T"/>.</param>
            <returns>A reference to the component of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:DefaultEcs.MessageHandler`1">
            <summary>
            Encapsulates a method that has a single in parameter and does not return a value used for <see cref="M:DefaultEcs.IPublisher.Subscribe``1(DefaultEcs.MessageHandler{``0})"/> method.
            </summary>
            <typeparam name="T">The type of the parameter of the method that this delegate encapsulates.</typeparam>
            <param name="message">The parameter of the method that this delegate encapsulates.</param>
        </member>
        <member name="T:DefaultEcs.WorldDisposedHandler">
            <summary>
            Represents the method that will called when a <see cref="T:DefaultEcs.World"/> is created.
            </summary>
            <param name="world">The dusposed <see cref="T:DefaultEcs.World"/>.</param>
        </member>
        <member name="T:DefaultEcs.EntityCreatedHandler">
            <summary>
            Represents the method that will called when an <see cref="T:DefaultEcs.Entity"/> is created.
            </summary>
            <param name="entity">The created <see cref="T:DefaultEcs.Entity"/>.</param>
        </member>
        <member name="T:DefaultEcs.EntityEnabledHandler">
            <summary>
            Represents the method that will called when an <see cref="T:DefaultEcs.Entity"/> is enabled.
            </summary>
            <param name="entity">The enabled <see cref="T:DefaultEcs.Entity"/>.</param>
        </member>
        <member name="T:DefaultEcs.EntityDisabledHandler">
            <summary>
            Represents the method that will called when an <see cref="T:DefaultEcs.Entity"/> is disabled.
            </summary>
            <param name="entity">The disabled <see cref="T:DefaultEcs.Entity"/>.</param>
        </member>
        <member name="T:DefaultEcs.EntityDisposedHandler">
            <summary>
            Represents the method that will called when an <see cref="T:DefaultEcs.Entity"/> is disposed.
            </summary>
            <param name="entity">The disposed <see cref="T:DefaultEcs.Entity"/>.</param>
        </member>
        <member name="T:DefaultEcs.ComponentAddedHandler`1">
            <summary>
            Represents the method that will called when a component of type <typeparamref name="T"/> is added on an <see cref="T:DefaultEcs.Entity"/>.
            </summary>
            <typeparam name="T">The type of the component added.</typeparam>
            <param name="entity">The <see cref="T:DefaultEcs.Entity"/> on which the component was added.</param>
            <param name="value">The value of the component.</param>
        </member>
        <member name="T:DefaultEcs.ComponentChangedHandler`1">
            <summary>
            Represents the method that will called when a component of type <typeparamref name="T"/> is removed from an <see cref="T:DefaultEcs.Entity"/>.
            </summary>
            <typeparam name="T">The type of the component removed.</typeparam>
            <param name="entity">The <see cref="T:DefaultEcs.Entity"/> on which the component was changed.</param>
            <param name="oldValue">The previous value of the component.</param>
            <param name="newValue">The new value of the component.</param>
        </member>
        <member name="T:DefaultEcs.ComponentRemovedHandler`1">
            <summary>
            Represents the method that will called when a component of type <typeparamref name="T"/> is removed from an <see cref="T:DefaultEcs.Entity"/>.
            </summary>
            <typeparam name="T">The type of the component removed.</typeparam>
            <param name="entity">The <see cref="T:DefaultEcs.Entity"/> on which the component was removed.</param>
            <param name="value">The value of the component.</param>
        </member>
        <member name="T:DefaultEcs.ComponentEnabledHandler`1">
            <summary>
            Represents the method that will called when a component of type <typeparamref name="T"/> is enabled on an <see cref="T:DefaultEcs.Entity"/>.
            </summary>
            <typeparam name="T">The type of the component enabled.</typeparam>
            <param name="entity">The <see cref="T:DefaultEcs.Entity"/> on which the component was enabled.</param>
            <param name="value">The value of the component.</param>
        </member>
        <member name="T:DefaultEcs.ComponentDisabledHandler`1">
            <summary>
            Represents the method that will called when a component of type <typeparamref name="T"/> is disabled on an <see cref="T:DefaultEcs.Entity"/>.
            </summary>
            <typeparam name="T">The type of the component disabled.</typeparam>
            <param name="entity">The <see cref="T:DefaultEcs.Entity"/> on which the component was disabled.</param>
            <param name="value">The value of the component.</param>
        </member>
        <member name="T:DefaultEcs.ComponentPredicate`1">
            <summary>
            Represents the method that defines a set of criteria and determines whether the specified component meets those criteria.
            </summary>
            <typeparam name="T">The type of the component to compare.</typeparam>
            <param name="value">The component value.</param>
            <returns>true if the component meets the criteria; otherwise, false.</returns>
        </member>
        <member name="T:DefaultEcs.EntityAddedHandler">
            <summary>
            Represents the method that will called when an <see cref="T:DefaultEcs.Entity"/> is added to a container.
            </summary>
            <param name="entity">The added <see cref="T:DefaultEcs.Entity"/>.</param>
        </member>
        <member name="T:DefaultEcs.EntityRemovedHandler">
            <summary>
            Represents the method that will called when an <see cref="T:DefaultEcs.Entity"/> is removed from a container.
            </summary>
            <param name="entity">The removed <see cref="T:DefaultEcs.Entity"/>.</param>
        </member>
        <member name="T:DefaultEcs.AssemblyDoc">
            <summary>
            This is the full API documentation of DefaultEcs.
            </summary>
        </member>
        <member name="T:DefaultEcs.NamespaceDoc">
            <summary>
            The <see cref="N:DefaultEcs"/> namespace contains types to put in place the Entity Component System pattern.
            </summary>
        </member>
        <member name="T:DefaultEcs.Resource.NamespaceDoc">
            <summary>
            The <see cref="N:DefaultEcs.Resource"/> namespace contains types used in the loading of unmanaged resources needed as components.
            </summary>
        </member>
        <member name="T:DefaultEcs.Resource.AResourceManager`2">
            <summary>
            Base type used to load resources of type <typeparamref name="TResource"/> using info of type <typeparamref name="TInfo"/>.
            <typeparamref name="TInfo"/> is used as key if the same resource is requested on multiple <see cref="T:DefaultEcs.Entity"/> to only load the <typeparamref name="TResource"/> resource once.
            If no <see cref="T:DefaultEcs.Entity"/> contains the <see cref="T:DefaultEcs.Resource.ManagedResource`2"/> component identifying the resource anymore, the <typeparamref name="TResource"/> instance is then unloaded automatically.
            By default, if <typeparamref name="TResource"/> is <see cref="T:System.IDisposable"/>, <see cref="M:DefaultEcs.Resource.AResourceManager`2.Unload(`0,`1)"/> will call the <see cref="M:System.IDisposable.Dispose"/> method of the resource.
            </summary>
            <typeparam name="TInfo">The type used to identify a resource.</typeparam>
            <typeparam name="TResource">The type of the resource.</typeparam>
        </member>
        <member name="T:DefaultEcs.Resource.AResourceManager`2.ResourceEnumerable">
            <summary>
            Allows to enumerate the resources of a <see cref="T:DefaultEcs.Resource.AResourceManager`2" />.
            </summary>
        </member>
        <member name="M:DefaultEcs.Resource.AResourceManager`2.ResourceEnumerable.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:DefaultEcs.Resource.AResourceManager`2.ResourceEnumerable.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TInfo,TResource}}#GetEnumerator">
            <inheritdoc cref="M:DefaultEcs.Resource.AResourceManager`2.ResourceEnumerable.GetEnumerator" />
        </member>
        <member name="M:DefaultEcs.Resource.AResourceManager`2.ResourceEnumerable.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:DefaultEcs.Resource.AResourceManager`2.ResourceEnumerable.GetEnumerator" />
        </member>
        <member name="T:DefaultEcs.Resource.AResourceManager`2.ResourceEnumerator">
            <summary>
            Enumerates the resources of a <see cref="T:DefaultEcs.Resource.AResourceManager`2" />.
            </summary>
        </member>
        <member name="P:DefaultEcs.Resource.AResourceManager`2.ResourceEnumerator.Current">
            <summary>
            Gets the resource at the current position of the enumerator.
            </summary>
            <returns>The resource at the current position of the enumerator.</returns>
        </member>
        <member name="P:DefaultEcs.Resource.AResourceManager`2.ResourceEnumerator.System#Collections#IEnumerator#Current">
            <inheritdoc cref="P:DefaultEcs.Resource.AResourceManager`2.ResourceEnumerator.Current" />
        </member>
        <member name="M:DefaultEcs.Resource.AResourceManager`2.ResourceEnumerator.MoveNext">
            <summary>Advances the enumerator to the next resource of the <see cref="T:DefaultEcs.Resource.AResourceManager`2" />.</summary>
            <returns>true if the enumerator was successfully advanced to the next resource; false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:DefaultEcs.Resource.AResourceManager`2.ResourceEnumerator.System#Collections#IEnumerator#Reset">
            <inheritdoc />
        </member>
        <member name="M:DefaultEcs.Resource.AResourceManager`2.ResourceEnumerator.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:DefaultEcs.Resource.AResourceManager`2.ResourceEnumerator" />.
            </summary>
        </member>
        <member name="P:DefaultEcs.Resource.AResourceManager`2.Resources">
            <summary>
            Gets all the <typeparamref name="TResource"/> loaded by the current instance and their corresponding <typeparamref name="TInfo"/>.
            </summary>
        </member>
        <member name="M:DefaultEcs.Resource.AResourceManager`2.#ctor">
            <summary>
            Creates an instance of type <see cref="T:DefaultEcs.Resource.AResourceManager`2"/>.
            </summary>
        </member>
        <member name="M:DefaultEcs.Resource.AResourceManager`2.Load(`0)">
            <summary>
            Loads a resource of type <typeparamref name="TResource"/> using the provided <typeparamref name="TInfo"/> parameter.
            </summary>
            <param name="info">The <typeparamref name="TInfo"/> instance used to load the resource.</param>
            <returns>The <typeparamref name="TResource"/> instance.</returns>
        </member>
        <member name="M:DefaultEcs.Resource.AResourceManager`2.OnResourceLoaded(DefaultEcs.Entity@,`0,`1)">
            <summary>
            Called when a resource is loaded from a <see cref="T:DefaultEcs.Resource.ManagedResource`2"/> component of an <see cref="T:DefaultEcs.Entity"/>.
            </summary>
            <param name="entity">The w<see cref="T:DefaultEcs.Entity"/> with the <see cref="T:DefaultEcs.Resource.ManagedResource`2"/> component.</param>
            <param name="info">The <typeparamref name="TInfo"/> info used to load the resource.</param>
            <param name="resource">The <typeparamref name="TResource"/> resource.</param>
        </member>
        <member name="M:DefaultEcs.Resource.AResourceManager`2.Unload(`0,`1)">
            <summary>
            Unloads a resource once it is no longer referenced by a <see cref="T:DefaultEcs.Resource.ManagedResource`2"/>.
            By default if <typeparamref name="TResource"/> is <see cref="T:System.IDisposable"/>, calls the <see cref="M:System.IDisposable.Dispose"/> method.
            </summary>
            <param name="info">The <typeparamref name="TInfo"/> that was used to load the resource.</param>
            <param name="resource">The <typeparamref name="TResource"/> to unload.</param>
        </member>
        <member name="M:DefaultEcs.Resource.AResourceManager`2.Manage(DefaultEcs.World)">
            <summary>
            Sets up current <see cref="T:DefaultEcs.Resource.AResourceManager`2"/> instance to react to <see cref="T:DefaultEcs.Resource.ManagedResource`2"/> components on <see cref="T:DefaultEcs.Entity"/> instances of the provided <see cref="T:DefaultEcs.World"/>.
            Once no <see cref="T:DefaultEcs.Entity"/> contains a <see cref="T:DefaultEcs.Resource.ManagedResource`2"/> component anymore, the shared <typeparamref name="TResource"/> resource is disposed automatically.
            </summary>
            <param name="world">The <see cref="T:DefaultEcs.World"/> instance on which to react to <see cref="T:DefaultEcs.Resource.ManagedResource`2"/> components.</param>
            <returns>An <see cref="T:System.IDisposable"/> instance used to make current <see cref="T:DefaultEcs.Resource.AResourceManager`2"/> instance stop reacting to <see cref="T:DefaultEcs.Resource.ManagedResource`2"/> component of the provided <see cref="T:DefaultEcs.World"/>.</returns>
        </member>
        <member name="M:DefaultEcs.Resource.AResourceManager`2.Dispose">
            <summary>
            Unloads all loaded resources.
            </summary>
        </member>
        <member name="T:DefaultEcs.Resource.ManagedResource`1">
            <summary>
            Provides static methods for creating <see cref="T:DefaultEcs.Resource.ManagedResource`2"/> object.
            </summary>
            <typeparam name="TResource">The type of the resource.</typeparam>
        </member>
        <member name="M:DefaultEcs.Resource.ManagedResource`1.Create``1(``0)">
            <summary>
            Create a <see cref="T:DefaultEcs.Resource.ManagedResource`2"/> object
            </summary>
            <typeparam name="TInfo">The infos used to identify the resources.</typeparam>
            <param name="info">The info used to identify the resource.</param>
            <returns>The <see cref="T:DefaultEcs.Resource.ManagedResource`2"/> object.</returns>
        </member>
        <member name="M:DefaultEcs.Resource.ManagedResource`1.Create``1(``0[])">
            <summary>
            Create a <see cref="T:DefaultEcs.Resource.ManagedResource`2"/> object with multiple infos.
            </summary>
            <typeparam name="TInfo">The infos used to identify the resources.</typeparam>
            <param name="infos">The type used to identify a resource.</param>
            <returns>The <see cref="T:DefaultEcs.Resource.ManagedResource`2"/> object.</returns>
        </member>
        <member name="T:DefaultEcs.Resource.ManagedResource`2">
            <summary>
            Component type used to load managed resource with a <see cref="T:DefaultEcs.Resource.AResourceManager`2"/>.
            </summary>
            <typeparam name="TInfo">The type used to identify a resource.</typeparam>
            <typeparam name="TResource">The type of the resource.</typeparam>
        </member>
        <member name="F:DefaultEcs.Resource.ManagedResource`2.Info">
            <summary>
            Gets the info about the resource to load.
            </summary>
        </member>
        <member name="M:DefaultEcs.Resource.ManagedResource`2.#ctor(`0)">
            <summary>
            Creates a component of type <see cref="T:DefaultEcs.Resource.ManagedResource`2"/> used to load a resource of type <typeparamref name="TResource"/>.
            </summary>
            <param name="info">The info used to identify the resource.</param>
        </member>
        <member name="T:DefaultEcs.Serialization.NamespaceDoc">
            <summary>
            The <see cref="N:DefaultEcs.Serialization"/> namespace contains types used to save and load DefaultEcs objects.
            </summary>
        </member>
        <member name="T:DefaultEcs.Serialization.BinarySerializationContext">
            <summary>
            Represents a context used by the <see cref="T:DefaultEcs.Serialization.BinarySerializer"/> to convert types during serialization and deserialization operations.
            The context marshalling will not be applied on members of unmanaged type as <see cref="T:DefaultEcs.Serialization.BinarySerializer"/> just past their memory location with no transformation.
            </summary>
        </member>
        <member name="M:DefaultEcs.Serialization.BinarySerializationContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DefaultEcs.Serialization.BinarySerializationContext"/> class.
            </summary>
        </member>
        <member name="M:DefaultEcs.Serialization.BinarySerializationContext.Marshal``2(System.Func{``0,``1})">
            <summary>
            Adds a convertion between the type <typeparamref name="TIn"/> and the type <typeparamref name="TOut"/> during a serialization operation.
            </summary>
            <typeparam name="TIn">The type which need to be converted.</typeparam>
            <typeparam name="TOut">The resulting type of the conversion.</typeparam>
            <param name="converter">The function used for the conversion.</param>
            <returns>Returns itself.</returns>
        </member>
        <member name="M:DefaultEcs.Serialization.BinarySerializationContext.Unmarshal``2(System.Func{``0,``1})">
            <summary>
            Adds a convertion between the type <typeparamref name="TIn"/> and the type <typeparamref name="TOut"/> during a deserialization operation.
            </summary>
            <typeparam name="TIn">The type which need to be converted.</typeparam>
            <typeparam name="TOut">The resulting type of the conversion.</typeparam>
            <param name="converter">The function used for the conversion.</param>
            <returns>Returns itself.</returns>
        </member>
        <member name="M:DefaultEcs.Serialization.BinarySerializationContext.Dispose">
            <summary>
            Releases inner resources.
            </summary>
        </member>
        <member name="T:DefaultEcs.Serialization.BinarySerializer">
            <summary>
            Provides a basic implementation of the <see cref="T:DefaultEcs.Serialization.ISerializer"/> interface using a binary format.
            </summary>
        </member>
        <member name="M:DefaultEcs.Serialization.BinarySerializer.#ctor(System.Predicate{System.Type},DefaultEcs.Serialization.BinarySerializationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:DefaultEcs.Serialization.BinarySerializer"/> class.
            </summary>
            <param name="componentFilter">A filter used to check wether a component type should be serialized/deserialized or not. A <see langword="null"/> value means everything is taken.</param>
            <param name="context">The <see cref="T:DefaultEcs.Serialization.BinarySerializationContext"/> used to convert type during serialization/deserialization.</param>
        </member>
        <member name="M:DefaultEcs.Serialization.BinarySerializer.#ctor(DefaultEcs.Serialization.BinarySerializationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:DefaultEcs.Serialization.BinarySerializer"/> class.
            </summary>
            <param name="context">The <see cref="T:DefaultEcs.Serialization.BinarySerializationContext"/> used to convert type during serialization/deserialization.</param>
        </member>
        <member name="M:DefaultEcs.Serialization.BinarySerializer.#ctor(System.Predicate{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:DefaultEcs.Serialization.BinarySerializer"/> class.
            </summary>
            <param name="componentFilter">A filter used to check wether a component type should be serialized/deserialized or not. A <see langword="null"/> value means everything is taken.</param>
        </member>
        <member name="M:DefaultEcs.Serialization.BinarySerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DefaultEcs.Serialization.BinarySerializer"/> class.
            </summary>
        </member>
        <member name="M:DefaultEcs.Serialization.BinarySerializer.Write``1(System.IO.Stream,``0@,DefaultEcs.Serialization.BinarySerializationContext)">
            <summary>
            Writes an object of type <typeparamref name="T"/> on the given stream.
            </summary>
            <typeparam name="T">The type of the object serialized.</typeparam>
            <param name="stream">The <see cref="T:System.IO.Stream"/> instance on which the object is to be serialized.</param>
            <param name="value">The object to serialize.</param>
            <param name="context">The <see cref="T:DefaultEcs.Serialization.BinarySerializationContext"/> used to convert type during serialization.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.Serialization.BinarySerializer.Write``1(System.IO.Stream,``0@)">
            <summary>
            Writes an object of type <typeparamref name="T"/> on the given stream.
            </summary>
            <typeparam name="T">The type of the object serialized.</typeparam>
            <param name="stream">The <see cref="T:System.IO.Stream"/> instance on which the object is to be serialized.</param>
            <param name="value">The object to serialize.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.Serialization.BinarySerializer.Read``1(System.IO.Stream,DefaultEcs.Serialization.BinarySerializationContext)">
            <summary>
            Read an object of type <typeparamref name="T"/> from the given stream.
            </summary>
            <typeparam name="T">The type of the object deserialized.</typeparam>
            <param name="stream">The <see cref="T:System.IO.Stream"/> instance from which the object is to be deserialized.</param>
            <param name="context">The <see cref="T:DefaultEcs.Serialization.BinarySerializationContext"/> used to convert type during deserialization.</param>
            <returns>The object deserialized.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.Serialization.BinarySerializer.Read``1(System.IO.Stream)">
            <summary>
            Read an object of type <typeparamref name="T"/> from the given stream.
            </summary>
            <typeparam name="T">The type of the object deserialized.</typeparam>
            <param name="stream">The <see cref="T:System.IO.Stream"/> instance from which the object is to be deserialized.</param>
            <returns>The object deserialized.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.Serialization.BinarySerializer.Serialize(System.IO.Stream,DefaultEcs.World)">
            <summary>
            Serializes the given <see cref="T:DefaultEcs.World"/> into the provided <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> in which the data will be saved.</param>
            <param name="world">The <see cref="T:DefaultEcs.World"/> instance to save.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="world"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.Serialization.BinarySerializer.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes a <see cref="T:DefaultEcs.World"/> instance from the given <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> from which the data will be loaded.</param>
            <returns>The <see cref="T:DefaultEcs.World"/> instance loaded.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.Serialization.BinarySerializer.Serialize(System.IO.Stream,System.Collections.Generic.IEnumerable{DefaultEcs.Entity})">
            <summary>
            Serializes the given <see cref="T:DefaultEcs.Entity"/> instances with their components into the provided <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> in which the data will be saved.</param>
            <param name="entities">The <see cref="T:DefaultEcs.Entity"/> instances to save.</param>
        </member>
        <member name="M:DefaultEcs.Serialization.BinarySerializer.Deserialize(System.IO.Stream,DefaultEcs.World)">
            <summary>
            Deserializes <see cref="T:DefaultEcs.Entity"/> instances with their components from the given <see cref="T:System.IO.Stream"/> into the given <see cref="T:DefaultEcs.World"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> from which the data will be loaded.</param>
            <param name="world">The <see cref="T:DefaultEcs.World"/> instance on which the <see cref="T:DefaultEcs.Entity"/> will be created.</param>
            <returns>The <see cref="T:DefaultEcs.Entity"/> instances loaded.</returns>
        </member>
        <member name="T:DefaultEcs.Serialization.IComponentReader">
            <summary>
            Exposes a method to be called back when getting an <see cref="T:DefaultEcs.Entity"/> components, primarly used for serialization purpose.
            </summary>
        </member>
        <member name="M:DefaultEcs.Serialization.IComponentReader.OnRead``1(``0@,DefaultEcs.Entity@)">
            <summary>
            Processes the component of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of component.</typeparam>
            <param name="component">The component.</param>
            <param name="componentOwner">The owner of the component instance, in case it is used by multiple <see cref="T:DefaultEcs.Entity"/>.</param>
        </member>
        <member name="T:DefaultEcs.Serialization.IComponentTypeReader">
            <summary>
            Exposes a method to be called back when getting the maximum number of component of a <see cref="T:DefaultEcs.World"/>, primarly used for serialization purpose.
            </summary>
        </member>
        <member name="M:DefaultEcs.Serialization.IComponentTypeReader.OnRead``1(System.Int32)">
            <summary>
            Processes the maximum number of component of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of component.</typeparam>
            <param name="maxCapacity">The maximum number of component of type <typeparamref name="T"/>.</param>
        </member>
        <member name="T:DefaultEcs.Serialization.ISerializerExtension">
            <summary>
            Provides extension methods to the <see cref="T:DefaultEcs.Serialization.ISerializer"/> type.
            </summary>
        </member>
        <member name="M:DefaultEcs.Serialization.ISerializerExtension.Serialize(DefaultEcs.Serialization.ISerializer,System.IO.Stream,DefaultEcs.Entity[])">
            <summary>
            Serializes the given <see cref="T:DefaultEcs.Entity"/> instances with their components into the provided <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="serializer">The <see cref="T:DefaultEcs.Serialization.ISerializer"/> instance to use.</param>
            <param name="stream">The <see cref="T:System.IO.Stream"/> in which the data will be saved.</param>
            <param name="entities">The <see cref="T:DefaultEcs.Entity"/> instances to save.</param>
        </member>
        <member name="T:DefaultEcs.Serialization.ISerializer">
            <summary>
            Provides a set of methods to save and load DefaultEcs objects.
            </summary>
        </member>
        <member name="M:DefaultEcs.Serialization.ISerializer.Serialize(System.IO.Stream,DefaultEcs.World)">
            <summary>
            Serializes the given <see cref="T:DefaultEcs.World"/> into the provided <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> in which the data will be saved.</param>
            <param name="world">The <see cref="T:DefaultEcs.World"/> instance to save.</param>
        </member>
        <member name="M:DefaultEcs.Serialization.ISerializer.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes a <see cref="T:DefaultEcs.World"/> instance from the given <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> from which the data will be loaded.</param>
            <returns>The <see cref="T:DefaultEcs.World"/> instance loaded.</returns>
        </member>
        <member name="M:DefaultEcs.Serialization.ISerializer.Serialize(System.IO.Stream,System.Collections.Generic.IEnumerable{DefaultEcs.Entity})">
            <summary>
            Serializes the given <see cref="T:DefaultEcs.Entity"/> instances with their components into the provided <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> in which the data will be saved.</param>
            <param name="entities">The <see cref="T:DefaultEcs.Entity"/> instances to save.</param>
        </member>
        <member name="M:DefaultEcs.Serialization.ISerializer.Deserialize(System.IO.Stream,DefaultEcs.World)">
            <summary>
            Deserializes <see cref="T:DefaultEcs.Entity"/> instances with their components from the given <see cref="T:System.IO.Stream"/> into the given <see cref="T:DefaultEcs.World"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> from which the data will be loaded.</param>
            <param name="world">The <see cref="T:DefaultEcs.World"/> instance on which the <see cref="T:DefaultEcs.Entity"/> will be created.</param>
            <returns>The <see cref="T:DefaultEcs.Entity"/> instances loaded.</returns>
        </member>
        <member name="T:DefaultEcs.Serialization.TextSerializationContext">
            <summary>
            Represents a context used by the <see cref="T:DefaultEcs.Serialization.TextSerializer"/> to convert types during serialization and deserialization operations.
            </summary>
        </member>
        <member name="M:DefaultEcs.Serialization.TextSerializationContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DefaultEcs.Serialization.TextSerializationContext"/> class.
            </summary>
        </member>
        <member name="M:DefaultEcs.Serialization.TextSerializationContext.Marshal``2(System.Func{``0,``1})">
            <summary>
            Adds a convertion between the type <typeparamref name="TIn"/> and the type <typeparamref name="TOut"/> during a serialization operation.
            </summary>
            <typeparam name="TIn">The type which need to be converted.</typeparam>
            <typeparam name="TOut">The resulting type of the conversion.</typeparam>
            <param name="converter">The function used for the conversion.</param>
            <returns>Returns itself.</returns>
        </member>
        <member name="M:DefaultEcs.Serialization.TextSerializationContext.Unmarshal``2(System.Func{``0,``1})">
            <summary>
            Adds a convertion between the type <typeparamref name="TIn"/> and the type <typeparamref name="TOut"/> during a deserialization operation.
            </summary>
            <typeparam name="TIn">The type which need to be converted.</typeparam>
            <typeparam name="TOut">The resulting type of the conversion.</typeparam>
            <param name="converter">The function used for the conversion.</param>
            <returns>Returns itself.</returns>
        </member>
        <member name="M:DefaultEcs.Serialization.TextSerializationContext.Dispose">
            <summary>
            Releases inner resources.
            </summary>
        </member>
        <member name="T:DefaultEcs.Serialization.TextSerializer">
            <summary>
            Provides a basic implementation of the <see cref="T:DefaultEcs.Serialization.ISerializer"/> interface using a text readable format.
            </summary>
        </member>
        <member name="M:DefaultEcs.Serialization.TextSerializer.#ctor(System.Predicate{System.Type},DefaultEcs.Serialization.TextSerializationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:DefaultEcs.Serialization.TextSerializer"/> class.
            </summary>
            <param name="componentFilter">A filter used to check wether a component type should be serialized/deserialized or not. A <see langword="null"/> value means everything is taken.</param>
            <param name="context">The <see cref="T:DefaultEcs.Serialization.TextSerializationContext"/> used to convert type during serialization/deserialization.</param>
        </member>
        <member name="M:DefaultEcs.Serialization.TextSerializer.#ctor(DefaultEcs.Serialization.TextSerializationContext)">
            <summary>
            Initializes a new instance of the <see cref="T:DefaultEcs.Serialization.TextSerializer"/> class.
            </summary>
            <param name="context">The <see cref="T:DefaultEcs.Serialization.TextSerializationContext"/> used to convert type during serialization/deserialization.</param>
        </member>
        <member name="M:DefaultEcs.Serialization.TextSerializer.#ctor(System.Predicate{System.Type})">
            <summary>
            Initializes a new instance of the <see cref="T:DefaultEcs.Serialization.TextSerializer"/> class.
            </summary>
            <param name="componentFilter">A filter used to check wether a component type should be serialized/deserialized or not. A <see langword="null"/> value means everything is taken.</param>
        </member>
        <member name="M:DefaultEcs.Serialization.TextSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DefaultEcs.Serialization.TextSerializer"/> class.
            </summary>
        </member>
        <member name="M:DefaultEcs.Serialization.TextSerializer.Write``1(System.IO.Stream,``0@,DefaultEcs.Serialization.TextSerializationContext)">
            <summary>
            Writes an object of type <typeparamref name="T"/> on the given stream.
            </summary>
            <typeparam name="T">The type of the object serialized.</typeparam>
            <param name="stream">The <see cref="T:System.IO.Stream"/> instance on which the object is to be serialized.</param>
            <param name="value">The object to serialize.</param>
            <param name="context">The <see cref="T:DefaultEcs.Serialization.TextSerializationContext"/> used to convert type during serialization.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.Serialization.TextSerializer.Write``1(System.IO.Stream,``0@)">
            <summary>
            Writes an object of type <typeparamref name="T"/> on the given stream.
            </summary>
            <typeparam name="T">The type of the object serialized.</typeparam>
            <param name="stream">The <see cref="T:System.IO.Stream"/> instance on which the object is to be serialized.</param>
            <param name="value">The object to serialize.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.Serialization.TextSerializer.Read``1(System.IO.Stream,DefaultEcs.Serialization.TextSerializationContext)">
            <summary>
            Read an object of type <typeparamref name="T"/> from the given stream.
            </summary>
            <typeparam name="T">The type of the object deserialized.</typeparam>
            <param name="stream">The <see cref="T:System.IO.Stream"/> instance from which the object is to be deserialized.</param>
            <param name="context">The <see cref="T:DefaultEcs.Serialization.TextSerializationContext"/> used to convert type during deserialization.</param>
            <returns>The object deserialized.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.Serialization.TextSerializer.Read``1(System.IO.Stream)">
            <summary>
            Read an object of type <typeparamref name="T"/> from the given stream.
            </summary>
            <typeparam name="T">The type of the object deserialized.</typeparam>
            <param name="stream">The <see cref="T:System.IO.Stream"/> instance from which the object is to be deserialized.</param>
            <returns>The object deserialized.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.Serialization.TextSerializer.Serialize(System.IO.Stream,DefaultEcs.World)">
            <summary>
            Serializes the given <see cref="T:DefaultEcs.World"/> into the provided <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> in which the data will be saved.</param>
            <param name="world">The <see cref="T:DefaultEcs.World"/> instance to save.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="world"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.Serialization.TextSerializer.Deserialize(System.IO.Stream)">
            <summary>
            Deserializes a <see cref="T:DefaultEcs.World"/> instance from the given <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> from which the data will be loaded.</param>
            <returns>The <see cref="T:DefaultEcs.World"/> instance loaded.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.Serialization.TextSerializer.Serialize(System.IO.Stream,System.Collections.Generic.IEnumerable{DefaultEcs.Entity})">
            <summary>
            Serializes the given <see cref="T:DefaultEcs.Entity"/> instances with their components into the provided <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> in which the data will be saved.</param>
            <param name="entities">The <see cref="T:DefaultEcs.Entity"/> instances to save.</param>
        </member>
        <member name="M:DefaultEcs.Serialization.TextSerializer.Deserialize(System.IO.Stream,DefaultEcs.World)">
            <summary>
            Deserializes <see cref="T:DefaultEcs.Entity"/> instances with their components from the given <see cref="T:System.IO.Stream"/> into the given <see cref="T:DefaultEcs.World"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> from which the data will be loaded.</param>
            <param name="world">The <see cref="T:DefaultEcs.World"/> instance on which the <see cref="T:DefaultEcs.Entity"/> will be created.</param>
            <returns>The <see cref="T:DefaultEcs.Entity"/> instances loaded.</returns>
        </member>
        <member name="T:DefaultEcs.System.NamespaceDoc">
            <summary>
            The <see cref="N:DefaultEcs.System"/> namespace contains types to define workflows of modification on entities and components.
            </summary>
        </member>
        <member name="T:DefaultEcs.System.AComponentSystem`2">
            <summary>
            Represents a base class to process updates on a given <see cref="P:DefaultEcs.System.AComponentSystem`2.World"/> instance to all its components of type <typeparamref name="TComponent"/>.
            </summary>
            <typeparam name="TState">The type of the object used as state to update the system.</typeparam>
            <typeparam name="TComponent">The type of component to update.</typeparam>
        </member>
        <member name="P:DefaultEcs.System.AComponentSystem`2.World">
            <summary>
            Gets the <see cref="T:DefaultEcs.World"/> instance on which this system operates.
            </summary>
        </member>
        <member name="M:DefaultEcs.System.AComponentSystem`2.#ctor(DefaultEcs.World,DefaultEcs.Threading.IParallelRunner,System.Int32)">
            <summary>
            Initialise a new instance of the <see cref="T:DefaultEcs.System.AComponentSystem`2"/> class with the given <see cref="P:DefaultEcs.System.AComponentSystem`2.World"/> and <see cref="T:DefaultEcs.Threading.IParallelRunner"/>.
            </summary>
            <param name="world">The <see cref="P:DefaultEcs.System.AComponentSystem`2.World"/> on which to process the update.</param>
            <param name="runner">The <see cref="T:DefaultEcs.Threading.IParallelRunner"/> used to process the update in parallel if not null.</param>
            <param name="minComponentCountByRunnerIndex">The minimum number of component per runner index to use the given <paramref name="runner"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="world"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.System.AComponentSystem`2.#ctor(DefaultEcs.World,DefaultEcs.Threading.IParallelRunner)">
            <summary>
            Initialise a new instance of the <see cref="T:DefaultEcs.System.AComponentSystem`2"/> class with the given <see cref="P:DefaultEcs.System.AComponentSystem`2.World"/> and <see cref="T:DefaultEcs.Threading.IParallelRunner"/>.
            </summary>
            <param name="world">The <see cref="P:DefaultEcs.System.AComponentSystem`2.World"/> on which to process the update.</param>
            <param name="runner">The <see cref="T:DefaultEcs.Threading.IParallelRunner"/> used to process the update in parallel if not null.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="world"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.System.AComponentSystem`2.#ctor(DefaultEcs.World)">
            <summary>
            Initialise a new instance of the <see cref="T:DefaultEcs.System.AComponentSystem`2"/> class with the given <see cref="P:DefaultEcs.System.AComponentSystem`2.World"/>.
            </summary>
            <param name="world">The <see cref="P:DefaultEcs.System.AComponentSystem`2.World"/> on which to process the update.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="world"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.System.AComponentSystem`2.PreUpdate(`0)">
            <summary>
            Performs a pre-update treatment.
            </summary>
            <param name="state">The state to use.</param>
        </member>
        <member name="M:DefaultEcs.System.AComponentSystem`2.PostUpdate(`0)">
            <summary>
            Performs a post-update treatment.
            </summary>
            <param name="state">The state to use.</param>
        </member>
        <member name="M:DefaultEcs.System.AComponentSystem`2.Update(`0,`1@)">
            <summary>
            Update the given <typeparamref name="TComponent"/> once.
            </summary>
            <param name="state">The state to use.</param>
            <param name="component">The <typeparamref name="TComponent"/> to update.</param>
        </member>
        <member name="M:DefaultEcs.System.AComponentSystem`2.Update(`0,System.Span{`1})">
            <summary>
            Update the given <typeparamref name="TComponent"/> once.
            </summary>
            <param name="state">The state to use.</param>
            <param name="components">The <typeparamref name="TComponent"/> to update.</param>
        </member>
        <member name="P:DefaultEcs.System.AComponentSystem`2.IsEnabled">
            <summary>
            Gets or sets whether the current <see cref="T:DefaultEcs.System.AComponentSystem`2"/> instance should update or not.
            </summary>
        </member>
        <member name="M:DefaultEcs.System.AComponentSystem`2.Update(`0)">
            <summary>
            Updates the system once.
            Does nothing if <see cref="P:DefaultEcs.System.AComponentSystem`2.IsEnabled"/> is false or if there is no component of type <typeparamref name="TComponent"/> in the <see cref="P:DefaultEcs.System.AComponentSystem`2.World"/>.
            </summary>
            <param name="state">The state to use.</param>
        </member>
        <member name="M:DefaultEcs.System.AComponentSystem`2.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="T:DefaultEcs.System.ActionSystem`1">
            <summary>
            Represents a class to set up easily a custom action as a system update.
            </summary>
            <typeparam name="T">The type of the object used as state to update the system.</typeparam>
        </member>
        <member name="M:DefaultEcs.System.ActionSystem`1.#ctor(System.Action{`0})">
            <summary>
            Initialises a new instance of the <see cref="T:DefaultEcs.System.ActionSystem`1"/> class with the given <see cref="T:System.Action`1"/>.
            </summary>
            <param name="action">The <see cref="T:System.Action`1"/> to call as update.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is null.</exception>
        </member>
        <member name="P:DefaultEcs.System.ActionSystem`1.IsEnabled">
            <summary>
            Gets or sets whether the current <see cref="T:DefaultEcs.System.ActionSystem`1"/> instance should update or not.
            </summary>
        </member>
        <member name="M:DefaultEcs.System.ActionSystem`1.Update(`0)">
            <summary>
            Updates the system once.
            </summary>
            <param name="state">The state to use.</param>
        </member>
        <member name="M:DefaultEcs.System.ActionSystem`1.Dispose">
            <summary>
            Does nothing.
            </summary>
        </member>
        <member name="T:DefaultEcs.System.AEntityMultiMapSystem`2">
            <summary>
            Represents a base class to process updates on a given <see cref="T:DefaultEcs.EntityMultiMap`1"/> instance.
            </summary>
            <typeparam name="TState">The type of the object used as state to update the system.</typeparam>
            <typeparam name="TKey">The type of the component used as key.</typeparam>
        </member>
        <member name="P:DefaultEcs.System.AEntityMultiMapSystem`2.MultiMap">
            <summary>
            Gets the <see cref="T:DefaultEcs.EntityMultiMap`1"/> instance on which this system operates.
            </summary>
        </member>
        <member name="P:DefaultEcs.System.AEntityMultiMapSystem`2.World">
            <summary>
            Gets the <see cref="T:DefaultEcs.World"/> instance on which this system operates.
            </summary>
        </member>
        <member name="M:DefaultEcs.System.AEntityMultiMapSystem`2.#ctor(DefaultEcs.EntityMultiMap{`1},DefaultEcs.Threading.IParallelRunner,System.Int32)">
            <summary>
            Initialise a new instance of the <see cref="T:DefaultEcs.System.AEntityMultiMapSystem`2"/> class with the given <see cref="T:DefaultEcs.EntityMultiMap`1"/> and <see cref="T:DefaultEcs.Threading.IParallelRunner"/>.
            </summary>
            <param name="map">The <see cref="T:DefaultEcs.EntityMultiMap`1"/> on which to process the update.</param>
            <param name="runner">The <see cref="T:DefaultEcs.Threading.IParallelRunner"/> used to process the update in parallel if not null.</param>
            <param name="minEntityCountByRunnerIndex">The minimum number of <see cref="T:DefaultEcs.Entity"/> per runner index to use the given <paramref name="runner"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="map"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.System.AEntityMultiMapSystem`2.#ctor(DefaultEcs.EntityMultiMap{`1},DefaultEcs.Threading.IParallelRunner)">
            <summary>
            Initialise a new instance of the <see cref="T:DefaultEcs.System.AEntityMultiMapSystem`2"/> class with the given <see cref="T:DefaultEcs.EntityMultiMap`1"/> and <see cref="T:DefaultEcs.Threading.IParallelRunner"/>.
            </summary>
            <param name="map">The <see cref="T:DefaultEcs.EntityMultiMap`1"/> on which to process the update.</param>
            <param name="runner">The <see cref="T:DefaultEcs.Threading.IParallelRunner"/> used to process the update in parallel if not null.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="map"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.System.AEntityMultiMapSystem`2.#ctor(DefaultEcs.EntityMultiMap{`1},System.Boolean)">
            <summary>
            Initialise a new instance of the <see cref="T:DefaultEcs.System.AEntityMultiMapSystem`2"/> class with the given <see cref="T:DefaultEcs.EntityMultiMap`1"/>.
            </summary>
            <param name="map">The <see cref="T:DefaultEcs.EntityMultiMap`1"/> on which to process the update.</param>
            <param name="useBuffer">Whether the entities should be copied before being processed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="map"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.System.AEntityMultiMapSystem`2.#ctor(DefaultEcs.EntityMultiMap{`1})">
            <summary>
            Initialise a new instance of the <see cref="T:DefaultEcs.System.AEntityMultiMapSystem`2"/> class with the given <see cref="T:DefaultEcs.EntityMultiMap`1"/>.
            </summary>
            <param name="map">The <see cref="T:DefaultEcs.EntityMultiMap`1"/> on which to process the update.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="map"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.System.AEntityMultiMapSystem`2.#ctor(DefaultEcs.World,System.Func{System.Object,DefaultEcs.World,DefaultEcs.EntityMultiMap{`1}},DefaultEcs.Threading.IParallelRunner,System.Int32)">
            <summary>
            Initialise a new instance of the <see cref="T:DefaultEcs.System.AEntityMultiMapSystem`2"/> class with the given <see cref="T:DefaultEcs.World"/> and factory.
            The current instance will be passed as the first parameter of the factory.
            </summary>
            <param name="world">The <see cref="T:DefaultEcs.World"/> from which to get the <see cref="T:DefaultEcs.Entity"/> instances to process the update.</param>
            <param name="factory">The factory used to create the <see cref="T:DefaultEcs.EntityMultiMap`1"/>.</param>
            <param name="runner">The <see cref="T:DefaultEcs.Threading.IParallelRunner"/> used to process the update in parallel if not null.</param>
            <param name="minEntityCountByRunnerIndex">The minimum number of <see cref="T:DefaultEcs.Entity"/> per runner index to use the given <paramref name="runner"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="world"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="factory"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.System.AEntityMultiMapSystem`2.#ctor(DefaultEcs.World,DefaultEcs.Threading.IParallelRunner,System.Int32)">
            <summary>
            Initialise a new instance of the <see cref="T:DefaultEcs.System.AEntityMultiMapSystem`2"/> class with the given <see cref="T:DefaultEcs.World"/>.
            To create the inner <see cref="T:DefaultEcs.EntityMultiMap`1"/>, <see cref="T:DefaultEcs.System.WithAttribute"/> and <see cref="T:DefaultEcs.System.WithoutAttribute"/> attributes will be used.
            </summary>
            <param name="world">The <see cref="T:DefaultEcs.World"/> from which to get the <see cref="T:DefaultEcs.Entity"/> instances to process the update.</param>
            <param name="runner">The <see cref="T:DefaultEcs.Threading.IParallelRunner"/> used to process the update in parallel if not null.</param>
            <param name="minEntityCountByRunnerIndex">The minimum number of <see cref="T:DefaultEcs.Entity"/> per runner index to use the given <paramref name="runner"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="world"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.System.AEntityMultiMapSystem`2.#ctor(DefaultEcs.World,DefaultEcs.Threading.IParallelRunner)">
            <summary>
            Initialise a new instance of the <see cref="T:DefaultEcs.System.AEntityMultiMapSystem`2"/> class with the given <see cref="T:DefaultEcs.World"/>.
            To create the inner <see cref="T:DefaultEcs.EntityMultiMap`1"/>, <see cref="T:DefaultEcs.System.WithAttribute"/> and <see cref="T:DefaultEcs.System.WithoutAttribute"/> attributes will be used.
            </summary>
            <param name="world">The <see cref="T:DefaultEcs.World"/> from which to get the <see cref="T:DefaultEcs.Entity"/> instances to process the update.</param>
            <param name="runner">The <see cref="T:DefaultEcs.Threading.IParallelRunner"/> used to process the update in parallel if not null.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="world"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.System.AEntityMultiMapSystem`2.#ctor(DefaultEcs.World,System.Func{System.Object,DefaultEcs.World,DefaultEcs.EntityMultiMap{`1}},System.Boolean)">
            <summary>
            Initialise a new instance of the <see cref="T:DefaultEcs.System.AEntityMultiMapSystem`2"/> class with the given <see cref="T:DefaultEcs.World"/>.
            To create the inner <see cref="T:DefaultEcs.EntityMultiMap`1"/>, <see cref="T:DefaultEcs.System.WithAttribute"/> and <see cref="T:DefaultEcs.System.WithoutAttribute"/> attributes will be used.
            </summary>
            <param name="world">The <see cref="T:DefaultEcs.World"/> from which to get the <see cref="T:DefaultEcs.Entity"/> instances to process the update.</param>
            <param name="factory">The factory used to create the <see cref="T:DefaultEcs.EntitySet"/>.</param>
            <param name="useBuffer">Whether the entities should be copied before being processed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="world"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="factory"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.System.AEntityMultiMapSystem`2.#ctor(DefaultEcs.World,System.Boolean)">
            <summary>
            Initialise a new instance of the <see cref="T:DefaultEcs.System.AEntityMultiMapSystem`2"/> class with the given <see cref="T:DefaultEcs.World"/>.
            To create the inner <see cref="T:DefaultEcs.EntityMultiMap`1"/>, <see cref="T:DefaultEcs.System.WithAttribute"/> and <see cref="T:DefaultEcs.System.WithoutAttribute"/> attributes will be used.
            </summary>
            <param name="world">The <see cref="T:DefaultEcs.World"/> from which to get the <see cref="T:DefaultEcs.Entity"/> instances to process the update.</param>
            <param name="useBuffer">Whether the entities should be copied before being processed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="world"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.System.AEntityMultiMapSystem`2.#ctor(DefaultEcs.World)">
            <summary>
            Initialise a new instance of the <see cref="T:DefaultEcs.System.AEntityMultiMapSystem`2"/> class with the given <see cref="T:DefaultEcs.World"/>.
            To create the inner <see cref="T:DefaultEcs.EntityMultiMap`1"/>, <see cref="T:DefaultEcs.System.WithAttribute"/> and <see cref="T:DefaultEcs.System.WithoutAttribute"/> attributes will be used.
            </summary>
            <param name="world">The <see cref="T:DefaultEcs.World"/> from which to get the <see cref="T:DefaultEcs.Entity"/> instances to process the update.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="world"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.System.AEntityMultiMapSystem`2.PreUpdate(`0)">
            <summary>
            Performs a pre-update treatment.
            </summary>
            <param name="state">The state to use.</param>
        </member>
        <member name="M:DefaultEcs.System.AEntityMultiMapSystem`2.PreUpdate(`0,`1)">
            <summary>
            Performs a pre-update per <typeparamref name="TKey"/> treatment.
            </summary>
            <param name="state">The state to use.</param>
            <param name="key">The key of the <see cref="T:DefaultEcs.Entity"/> instances about to be updated.</param>
        </member>
        <member name="M:DefaultEcs.System.AEntityMultiMapSystem`2.PostUpdate(`0,`1)">
            <summary>
            Performs a post-update per <typeparamref name="TKey"/> treatment.
            </summary>
            <param name="state">The state to use.</param>
            <param name="key">The key of the <see cref="T:DefaultEcs.Entity"/> instances which have been updated.</param>
        </member>
        <member name="M:DefaultEcs.System.AEntityMultiMapSystem`2.PostUpdate(`0)">
            <summary>
            Performs a post-update treatment.
            </summary>
            <param name="state">The state to use.</param>
        </member>
        <member name="M:DefaultEcs.System.AEntityMultiMapSystem`2.GetKeys">
            <summary>
            Gets all the <typeparamref name="TKey"/> of the inner <see cref="T:DefaultEcs.EntityMultiMap`1"/> which <see cref="T:DefaultEcs.Entity"/> instances will be updated.
            </summary>
            <returns>A <see cref="T:System.Span`1"/> of <typeparamref name="TKey"/> in the order of update.</returns>
        </member>
        <member name="M:DefaultEcs.System.AEntityMultiMapSystem`2.Update(`0,`1@,DefaultEcs.Entity@)">
            <summary>
            Update the given <see cref="T:DefaultEcs.Entity"/> instance once.
            </summary>
            <param name="state">The state to use.</param>
            <param name="key">The key of the current <see cref="T:DefaultEcs.Entity"/>.</param>
            <param name="entity">The <see cref="T:DefaultEcs.Entity"/> instance to update.</param>
        </member>
        <member name="M:DefaultEcs.System.AEntityMultiMapSystem`2.Update(`0,`1@,System.ReadOnlySpan{DefaultEcs.Entity})">
            <summary>
            Update the given <see cref="T:DefaultEcs.Entity"/> instances once.
            </summary>
            <param name="state">The state to use.</param>
            <param name="key">The key of the current <see cref="T:DefaultEcs.Entity"/> instances.</param>
            <param name="entities">The <see cref="T:DefaultEcs.Entity"/> instances to update.</param>
        </member>
        <member name="P:DefaultEcs.System.AEntityMultiMapSystem`2.IsEnabled">
            <summary>
            Gets or sets whether the current <see cref="T:DefaultEcs.System.AEntityMultiMapSystem`2"/> instance should update or not.
            </summary>
        </member>
        <member name="M:DefaultEcs.System.AEntityMultiMapSystem`2.Update(`0)">
            <summary>
            Updates the system once.
            Does nothing if <see cref="P:DefaultEcs.System.AEntityMultiMapSystem`2.IsEnabled"/> is false or if the inner <see cref="T:DefaultEcs.EntityMultiMap`1"/> is empty.
            </summary>
            <param name="state">The state to use.</param>
        </member>
        <member name="M:DefaultEcs.System.AEntityMultiMapSystem`2.Dispose">
            <summary>
            Disposes of the inner <see cref="T:DefaultEcs.EntityMultiMap`1"/> instance.
            </summary>
        </member>
        <member name="T:DefaultEcs.System.AEntitySetSystem`1">
            <summary>
            Represents a base class to process updates on a given <see cref="T:DefaultEcs.EntitySet"/> instance.
            Only <see cref="M:DefaultEcs.Entity.Get``1"/>, <see cref="M:DefaultEcs.Entity.Set``1(``0@)"/> and <see cref="M:DefaultEcs.Entity.SetSameAs``1(DefaultEcs.Entity@)"/> operation on already present component type are safe.
            </summary>
            <typeparam name="T">The type of the object used as state to update the system.</typeparam>
        </member>
        <member name="P:DefaultEcs.System.AEntitySetSystem`1.Set">
            <summary>
            Gets the <see cref="T:DefaultEcs.EntitySet"/> instance on which this system operates.
            </summary>
        </member>
        <member name="P:DefaultEcs.System.AEntitySetSystem`1.World">
            <summary>
            Gets the <see cref="T:DefaultEcs.World"/> instance on which this system operates.
            </summary>
        </member>
        <member name="M:DefaultEcs.System.AEntitySetSystem`1.#ctor(DefaultEcs.EntitySet,DefaultEcs.Threading.IParallelRunner,System.Int32)">
            <summary>
            Initialise a new instance of the <see cref="T:DefaultEcs.System.AEntitySetSystem`1"/> class with the given <see cref="T:DefaultEcs.EntitySet"/> and <see cref="T:DefaultEcs.Threading.IParallelRunner"/>.
            </summary>
            <param name="set">The <see cref="T:DefaultEcs.EntitySet"/> on which to process the update.</param>
            <param name="runner">The <see cref="T:DefaultEcs.Threading.IParallelRunner"/> used to process the update in parallel if not null.</param>
            <param name="minEntityCountByRunnerIndex">The minimum number of <see cref="T:DefaultEcs.Entity"/> per runner index to use the given <paramref name="runner"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="set"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.System.AEntitySetSystem`1.#ctor(DefaultEcs.EntitySet,DefaultEcs.Threading.IParallelRunner)">
            <summary>
            Initialise a new instance of the <see cref="T:DefaultEcs.System.AEntitySetSystem`1"/> class with the given <see cref="T:DefaultEcs.EntitySet"/> and <see cref="T:DefaultEcs.Threading.IParallelRunner"/>.
            </summary>
            <param name="set">The <see cref="T:DefaultEcs.EntitySet"/> on which to process the update.</param>
            <param name="runner">The <see cref="T:DefaultEcs.Threading.IParallelRunner"/> used to process the update in parallel if not null.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="set"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.System.AEntitySetSystem`1.#ctor(DefaultEcs.EntitySet,System.Boolean)">
            <summary>
            Initialise a new instance of the <see cref="T:DefaultEcs.System.AEntitySetSystem`1"/> class with the given <see cref="T:DefaultEcs.EntitySet"/>.
            </summary>
            <param name="set">The <see cref="T:DefaultEcs.EntitySet"/> on which to process the update.</param>
            <param name="useBuffer">Whether the entities should be copied before being processed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="set"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.System.AEntitySetSystem`1.#ctor(DefaultEcs.EntitySet)">
            <summary>
            Initialise a new instance of the <see cref="T:DefaultEcs.System.AEntitySetSystem`1"/> class with the given <see cref="T:DefaultEcs.EntitySet"/>.
            </summary>
            <param name="set">The <see cref="T:DefaultEcs.EntitySet"/> on which to process the update.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="set"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.System.AEntitySetSystem`1.#ctor(DefaultEcs.World,System.Func{System.Object,DefaultEcs.World,DefaultEcs.EntitySet},DefaultEcs.Threading.IParallelRunner,System.Int32)">
            <summary>
            Initialise a new instance of the <see cref="T:DefaultEcs.System.AEntitySetSystem`1"/> class with the given <see cref="T:DefaultEcs.World"/> and factory.
            The current instance will be passed as the first parameter of the factory.
            </summary>
            <param name="world">The <see cref="T:DefaultEcs.World"/> from which to get the <see cref="T:DefaultEcs.Entity"/> instances to process the update.</param>
            <param name="factory">The factory used to create the <see cref="T:DefaultEcs.EntitySet"/>.</param>
            <param name="runner">The <see cref="T:DefaultEcs.Threading.IParallelRunner"/> used to process the update in parallel if not null.</param>
            <param name="minEntityCountByRunnerIndex">The minimum number of <see cref="T:DefaultEcs.Entity"/> per runner index to use the given <paramref name="runner"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="world"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="factory"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.System.AEntitySetSystem`1.#ctor(DefaultEcs.World,DefaultEcs.Threading.IParallelRunner,System.Int32)">
            <summary>
            Initialise a new instance of the <see cref="T:DefaultEcs.System.AEntitySetSystem`1"/> class with the given <see cref="T:DefaultEcs.World"/>.
            To create the inner <see cref="T:DefaultEcs.EntitySet"/>, <see cref="T:DefaultEcs.System.WithAttribute"/> and <see cref="T:DefaultEcs.System.WithoutAttribute"/> attributes will be used.
            </summary>
            <param name="world">The <see cref="T:DefaultEcs.World"/> from which to get the <see cref="T:DefaultEcs.Entity"/> instances to process the update.</param>
            <param name="runner">The <see cref="T:DefaultEcs.Threading.IParallelRunner"/> used to process the update in parallel if not null.</param>
            <param name="minEntityCountByRunnerIndex">The minimum number of <see cref="T:DefaultEcs.Entity"/> per runner index to use the given <paramref name="runner"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="world"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.System.AEntitySetSystem`1.#ctor(DefaultEcs.World,DefaultEcs.Threading.IParallelRunner)">
            <summary>
            Initialise a new instance of the <see cref="T:DefaultEcs.System.AEntitySetSystem`1"/> class with the given <see cref="T:DefaultEcs.World"/>.
            To create the inner <see cref="T:DefaultEcs.EntitySet"/>, <see cref="T:DefaultEcs.System.WithAttribute"/> and <see cref="T:DefaultEcs.System.WithoutAttribute"/> attributes will be used.
            </summary>
            <param name="world">The <see cref="T:DefaultEcs.World"/> from which to get the <see cref="T:DefaultEcs.Entity"/> instances to process the update.</param>
            <param name="runner">The <see cref="T:DefaultEcs.Threading.IParallelRunner"/> used to process the update in parallel if not null.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="world"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.System.AEntitySetSystem`1.#ctor(DefaultEcs.World,System.Func{System.Object,DefaultEcs.World,DefaultEcs.EntitySet},System.Boolean)">
            <summary>
            Initialise a new instance of the <see cref="T:DefaultEcs.System.AEntitySetSystem`1"/> class with the given <see cref="T:DefaultEcs.World"/>.
            To create the inner <see cref="T:DefaultEcs.EntitySet"/>, <see cref="T:DefaultEcs.System.WithAttribute"/> and <see cref="T:DefaultEcs.System.WithoutAttribute"/> attributes will be used.
            </summary>
            <param name="world">The <see cref="T:DefaultEcs.World"/> from which to get the <see cref="T:DefaultEcs.Entity"/> instances to process the update.</param>
            <param name="factory">The factory used to create the <see cref="T:DefaultEcs.EntitySet"/>.</param>
            <param name="useBuffer">Whether the entities should be copied before being processed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="world"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="factory"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.System.AEntitySetSystem`1.#ctor(DefaultEcs.World,System.Boolean)">
            <summary>
            Initialise a new instance of the <see cref="T:DefaultEcs.System.AEntitySetSystem`1"/> class with the given <see cref="T:DefaultEcs.World"/>.
            To create the inner <see cref="T:DefaultEcs.EntitySet"/>, <see cref="T:DefaultEcs.System.WithAttribute"/> and <see cref="T:DefaultEcs.System.WithoutAttribute"/> attributes will be used.
            </summary>
            <param name="world">The <see cref="T:DefaultEcs.World"/> from which to get the <see cref="T:DefaultEcs.Entity"/> instances to process the update.</param>
            <param name="useBuffer">Whether the entities should be copied before being processed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="world"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.System.AEntitySetSystem`1.#ctor(DefaultEcs.World)">
            <summary>
            Initialise a new instance of the <see cref="T:DefaultEcs.System.AEntitySetSystem`1"/> class with the given <see cref="T:DefaultEcs.World"/>.
            To create the inner <see cref="T:DefaultEcs.EntitySet"/>, <see cref="T:DefaultEcs.System.WithAttribute"/> and <see cref="T:DefaultEcs.System.WithoutAttribute"/> attributes will be used.
            </summary>
            <param name="world">The <see cref="T:DefaultEcs.World"/> from which to get the <see cref="T:DefaultEcs.Entity"/> instances to process the update.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="world"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.System.AEntitySetSystem`1.PreUpdate(`0)">
            <summary>
            Performs a pre-update treatment.
            </summary>
            <param name="state">The state to use.</param>
        </member>
        <member name="M:DefaultEcs.System.AEntitySetSystem`1.PostUpdate(`0)">
            <summary>
            Performs a post-update treatment.
            </summary>
            <param name="state">The state to use.</param>
        </member>
        <member name="M:DefaultEcs.System.AEntitySetSystem`1.Update(`0,DefaultEcs.Entity@)">
            <summary>
            Update the given <see cref="T:DefaultEcs.Entity"/> instance once.
            </summary>
            <param name="state">The state to use.</param>
            <param name="entity">The <see cref="T:DefaultEcs.Entity"/> instance to update.</param>
        </member>
        <member name="M:DefaultEcs.System.AEntitySetSystem`1.Update(`0,System.ReadOnlySpan{DefaultEcs.Entity})">
            <summary>
            Update the given <see cref="T:DefaultEcs.Entity"/> instances once.
            </summary>
            <param name="state">The state to use.</param>
            <param name="entities">The <see cref="T:DefaultEcs.Entity"/> instances to update.</param>
        </member>
        <member name="P:DefaultEcs.System.AEntitySetSystem`1.IsEnabled">
            <summary>
            Gets or sets whether the current <see cref="T:DefaultEcs.System.AEntitySetSystem`1"/> instance should update or not.
            </summary>
        </member>
        <member name="M:DefaultEcs.System.AEntitySetSystem`1.Update(`0)">
            <summary>
            Updates the system once.
            Does nothing if <see cref="P:DefaultEcs.System.AEntitySetSystem`1.IsEnabled"/> is false or if the inner <see cref="T:DefaultEcs.EntitySet"/> is empty.
            </summary>
            <param name="state">The state to use.</param>
        </member>
        <member name="M:DefaultEcs.System.AEntitySetSystem`1.Dispose">
            <summary>
            Disposes of the inner <see cref="T:DefaultEcs.EntitySet"/> instance.
            </summary>
        </member>
        <member name="T:DefaultEcs.System.AEntitySortedSetSystem`2">
            <summary>
            Represents a base class to process updates on a given <see cref="T:DefaultEcs.EntitySortedSet`1"/> instance.
            Only <see cref="M:DefaultEcs.Entity.Get``1"/>, <see cref="M:DefaultEcs.Entity.Set``1(``0@)"/> and <see cref="M:DefaultEcs.Entity.SetSameAs``1(DefaultEcs.Entity@)"/> operation on already present component type are safe.
            </summary>
            <typeparam name="TState">The type of the object used as state to update the system.</typeparam>
            <typeparam name="TComponent">The type of the component to sort <see cref="T:DefaultEcs.Entity"/> by.</typeparam>
        </member>
        <member name="P:DefaultEcs.System.AEntitySortedSetSystem`2.SortedSet">
            <summary>
            Gets the <see cref="T:DefaultEcs.EntitySortedSet`1"/> instance on which this system operates.
            </summary>
        </member>
        <member name="P:DefaultEcs.System.AEntitySortedSetSystem`2.World">
            <summary>
            Gets the <see cref="T:DefaultEcs.World"/> instance on which this system operates.
            </summary>
        </member>
        <member name="M:DefaultEcs.System.AEntitySortedSetSystem`2.#ctor(DefaultEcs.EntitySortedSet{`1})">
            <summary>
            Initialise a new instance of the <see cref="T:DefaultEcs.System.AEntitySortedSetSystem`2"/> class with the given <see cref="T:DefaultEcs.EntitySortedSet`1"/>.
            </summary>
            <param name="sortedSet">The <see cref="T:DefaultEcs.EntitySortedSet`1"/> on which to process the update.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sortedSet"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.System.AEntitySortedSetSystem`2.#ctor(DefaultEcs.EntitySortedSet{`1},System.Boolean)">
            <summary>
            Initialise a new instance of the <see cref="T:DefaultEcs.System.AEntitySortedSetSystem`2"/> class with the given <see cref="T:DefaultEcs.EntitySortedSet`1"/>.
            </summary>
            <param name="sortedSet">The <see cref="T:DefaultEcs.EntitySet"/> on which to process the update.</param>
            <param name="useBuffer">Whether the entities should be copied before being processed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="sortedSet"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.System.AEntitySortedSetSystem`2.#ctor(DefaultEcs.World,System.Func{System.Object,DefaultEcs.World,DefaultEcs.EntitySortedSet{`1}})">
            <summary>
            Initialise a new instance of the <see cref="T:DefaultEcs.System.AEntitySortedSetSystem`2"/> class with the given <see cref="T:DefaultEcs.World"/> and factory.
            The current instance will be passed as the first parameter of the factory.
            </summary>
            <param name="world">The <see cref="T:DefaultEcs.World"/> from which to get the <see cref="T:DefaultEcs.Entity"/> instances to process the update.</param>
            <param name="factory">The factory used to create the <see cref="T:DefaultEcs.EntitySortedSet`1"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="world"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="factory"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.System.AEntitySortedSetSystem`2.#ctor(DefaultEcs.World,System.Func{System.Object,DefaultEcs.World,DefaultEcs.EntitySortedSet{`1}},System.Boolean)">
            <summary>
            Initialise a new instance of the <see cref="T:DefaultEcs.System.AEntitySortedSetSystem`2"/> class with the given <see cref="T:DefaultEcs.World"/> and factory.
            To create the inner <see cref="T:DefaultEcs.EntitySet"/>, <see cref="T:DefaultEcs.System.WithAttribute"/> and <see cref="T:DefaultEcs.System.WithoutAttribute"/> attributes will be used.
            </summary>
            <param name="world">The <see cref="T:DefaultEcs.World"/> from which to get the <see cref="T:DefaultEcs.Entity"/> instances to process the update.</param>
            <param name="factory">The factory used to create the <see cref="T:DefaultEcs.EntitySortedSet`1"/>.</param>
            <param name="useBuffer">Whether the entities should be copied before being processed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="world"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="factory"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.System.AEntitySortedSetSystem`2.#ctor(DefaultEcs.World,System.Boolean)">
            <summary>
            Initialise a new instance of the <see cref="T:DefaultEcs.System.AEntitySortedSetSystem`2"/> class with the given <see cref="T:DefaultEcs.World"/> and factory.
            To create the inner <see cref="T:DefaultEcs.EntitySet"/>, <see cref="T:DefaultEcs.System.WithAttribute"/> and <see cref="T:DefaultEcs.System.WithoutAttribute"/> attributes will be used.
            </summary>
            <param name="world">The <see cref="T:DefaultEcs.World"/> from which to get the <see cref="T:DefaultEcs.Entity"/> instances to process the update.</param>
            <param name="useBuffer">Whether the entities should be copied before being processed.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="world"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.System.AEntitySortedSetSystem`2.#ctor(DefaultEcs.World)">
            <summary>
            Initialise a new instance of the <see cref="T:DefaultEcs.System.AEntitySortedSetSystem`2"/> class with the given <see cref="T:DefaultEcs.World"/> and factory.
            To create the inner <see cref="T:DefaultEcs.EntitySet"/>, <see cref="T:DefaultEcs.System.WithAttribute"/> and <see cref="T:DefaultEcs.System.WithoutAttribute"/> attributes will be used.
            </summary>
            <param name="world">The <see cref="T:DefaultEcs.World"/> from which to get the <see cref="T:DefaultEcs.Entity"/> instances to process the update.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="world"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.System.AEntitySortedSetSystem`2.PreUpdate(`0)">
            <summary>
            Performs a pre-update treatment.
            </summary>
            <param name="state">The state to use.</param>
        </member>
        <member name="M:DefaultEcs.System.AEntitySortedSetSystem`2.PostUpdate(`0)">
            <summary>
            Performs a post-update treatment.
            </summary>
            <param name="state">The state to use.</param>
        </member>
        <member name="M:DefaultEcs.System.AEntitySortedSetSystem`2.Update(`0,DefaultEcs.Entity@)">
            <summary>
            Update the given <see cref="T:DefaultEcs.Entity"/> instance once.
            </summary>
            <param name="state">The state to use.</param>
            <param name="entity">The <see cref="T:DefaultEcs.Entity"/> instance to update.</param>
        </member>
        <member name="M:DefaultEcs.System.AEntitySortedSetSystem`2.Update(`0,System.ReadOnlySpan{DefaultEcs.Entity})">
            <summary>
            Update the given <see cref="T:DefaultEcs.Entity"/> instances once.
            </summary>
            <param name="state">The state to use.</param>
            <param name="entities">The <see cref="T:DefaultEcs.Entity"/> instances to update.</param>
        </member>
        <member name="P:DefaultEcs.System.AEntitySortedSetSystem`2.IsEnabled">
            <summary>
            Gets or sets whether the current <see cref="T:DefaultEcs.System.AEntitySortedSetSystem`2"/> instance should update or not.
            </summary>
        </member>
        <member name="M:DefaultEcs.System.AEntitySortedSetSystem`2.Update(`0)">
            <summary>
            Updates the system once.
            Does nothing if <see cref="P:DefaultEcs.System.AEntitySortedSetSystem`2.IsEnabled"/> is false or if the inner <see cref="T:DefaultEcs.EntitySortedSet`1"/> is empty.
            </summary>
            <param name="state">The state to use.</param>
        </member>
        <member name="M:DefaultEcs.System.AEntitySortedSetSystem`2.Dispose">
            <summary>
            Disposes of the inner <see cref="T:DefaultEcs.EntitySortedSet`1"/> instance.
            </summary>
        </member>
        <member name="T:DefaultEcs.System.DisabledAttribute">
            <summary>
            Makes so when building the inner <see cref="T:DefaultEcs.EntitySet"/> of <see cref="T:DefaultEcs.System.AEntitySetSystem`1"/> when giving a <see cref="T:DefaultEcs.World"/> instance, it will only contain disabled entities.
            </summary>
        </member>
        <member name="T:DefaultEcs.System.WithPredicateAttribute">
            <summary>
            Makes so when building the inner EntitySet of <see cref="T:DefaultEcs.System.AEntitySetSystem`1"/> when giving a <see cref="T:DefaultEcs.World"/> instance, the decorated method will be used as a component predicate.
            The decorated method should be of the type <see cref="T:DefaultEcs.ComponentPredicate`1"/>.
            </summary>
        </member>
        <member name="T:DefaultEcs.System.ComponentFilterType">
            <summary>
            Specifies which filter rule should be applied when using a <see cref="T:DefaultEcs.System.ComponentAttribute"/>.
            </summary>
        </member>
        <member name="F:DefaultEcs.System.ComponentFilterType.With">
            <summary>
            Given component types should be present.
            </summary>
        </member>
        <member name="F:DefaultEcs.System.ComponentFilterType.WithEither">
            <summary>
            At least one of the given component types should be present.
            </summary>
        </member>
        <member name="F:DefaultEcs.System.ComponentFilterType.Without">
            <summary>
            Given component type should be absent.
            </summary>
        </member>
        <member name="F:DefaultEcs.System.ComponentFilterType.WithoutEither">
            <summary>
            At least one of the given component types should not be present.
            </summary>
        </member>
        <member name="F:DefaultEcs.System.ComponentFilterType.WhenAdded">
            <summary>
            Given component types are added.
            </summary>
        </member>
        <member name="F:DefaultEcs.System.ComponentFilterType.WhenAddedEither">
            <summary>
            At least one of the given component types is added.
            </summary>
        </member>
        <member name="F:DefaultEcs.System.ComponentFilterType.WhenChanged">
            <summary>
            Given component types are changed.
            </summary>
        </member>
        <member name="F:DefaultEcs.System.ComponentFilterType.WhenChangedEither">
            <summary>
            At least one of the given component types is changed.
            </summary>
        </member>
        <member name="F:DefaultEcs.System.ComponentFilterType.WhenRemoved">
            <summary>
            Given component types are removed.
            </summary>
        </member>
        <member name="F:DefaultEcs.System.ComponentFilterType.WhenRemovedEither">
            <summary>
            At least one of the given component types is removed.
            </summary>
        </member>
        <member name="T:DefaultEcs.System.ComponentAttribute">
            <summary>
            Represents the base attribute to declare how to build the inner <see cref="T:DefaultEcs.EntitySet"/> of <see cref="T:DefaultEcs.System.AEntitySetSystem`1"/> when giving a <see cref="T:DefaultEcs.World"/> instance.
            Do not use this attribute, prefer <see cref="T:DefaultEcs.System.WithAttribute"/> and <see cref="T:DefaultEcs.System.WithoutAttribute"/> instead.
            </summary>
        </member>
        <member name="F:DefaultEcs.System.ComponentAttribute.ComponentTypes">
            <summary>
            The types of the component.
            </summary>
        </member>
        <member name="F:DefaultEcs.System.ComponentAttribute.FilterType">
            <summary>
            Whether the component type should be included or excluded.
            </summary>
        </member>
        <member name="M:DefaultEcs.System.ComponentAttribute.#ctor(DefaultEcs.System.ComponentFilterType,System.Type[])">
            <summary>
            Initialize a new instance of the <see cref="T:DefaultEcs.System.ComponentAttribute"/> type.
            </summary>
            <param name="filterType">The type of filter to apply with the given types.</param>
            <param name="componentTypes">The types of the component.</param>
        </member>
        <member name="T:DefaultEcs.System.WithAttribute">
            <summary>
            Represents a component type to include when building the inner <see cref="T:DefaultEcs.EntitySet"/> of <see cref="T:DefaultEcs.System.AEntitySetSystem`1"/> when giving a <see cref="T:DefaultEcs.World"/> instance.
            </summary>
        </member>
        <member name="M:DefaultEcs.System.WithAttribute.#ctor(System.Type[])">
            <summary>
            Initialize a new instance of the <see cref="T:DefaultEcs.System.WithAttribute"/> type.
            </summary>
            <param name="componentTypes">The types of the component to include.</param>
        </member>
        <member name="T:DefaultEcs.System.WithEitherAttribute">
            <summary>
            Represents a group of component types which at least one should be present when building the inner <see cref="T:DefaultEcs.EntitySet"/> of <see cref="T:DefaultEcs.System.AEntitySetSystem`1"/> when giving a <see cref="T:DefaultEcs.World"/> instance.
            </summary>
        </member>
        <member name="M:DefaultEcs.System.WithEitherAttribute.#ctor(System.Type[])">
            <summary>
            Initialize a new instance of the <see cref="T:DefaultEcs.System.WithEitherAttribute"/> type.
            </summary>
            <param name="componentTypes">The types of the component to include.</param>
        </member>
        <member name="T:DefaultEcs.System.WithoutAttribute">
            <summary>
            Represents a component type to exclude when building the inner <see cref="T:DefaultEcs.EntitySet"/> of <see cref="T:DefaultEcs.System.AEntitySetSystem`1"/> when giving a <see cref="T:DefaultEcs.World"/> instance.
            </summary>
        </member>
        <member name="M:DefaultEcs.System.WithoutAttribute.#ctor(System.Type[])">
            <summary>
            Initialize a new instance of the <see cref="T:DefaultEcs.System.WithoutAttribute"/> type.
            </summary>
            <param name="componentTypes">The types of the component to exclude.</param>
        </member>
        <member name="T:DefaultEcs.System.WithoutEitherAttribute">
            <summary>
            Represents a group of component types which at least one should not be present when building the inner <see cref="T:DefaultEcs.EntitySet"/> of <see cref="T:DefaultEcs.System.AEntitySetSystem`1"/> when giving a <see cref="T:DefaultEcs.World"/> instance.
            </summary>
        </member>
        <member name="M:DefaultEcs.System.WithoutEitherAttribute.#ctor(System.Type[])">
            <summary>
            Initialize a new instance of the <see cref="T:DefaultEcs.System.WithEitherAttribute"/> type.
            </summary>
            <param name="componentTypes">The types of the component to exclude.</param>
        </member>
        <member name="T:DefaultEcs.System.WhenAddedAttribute">
            <summary>
            Represents a component type to react to its addition when building the inner <see cref="T:DefaultEcs.EntitySet"/> of <see cref="T:DefaultEcs.System.AEntitySetSystem`1"/> when giving a <see cref="T:DefaultEcs.World"/> instance.
            </summary>
        </member>
        <member name="M:DefaultEcs.System.WhenAddedAttribute.#ctor(System.Type[])">
            <summary>
            Initialize a new instance of the <see cref="T:DefaultEcs.System.WhenAddedAttribute"/> type.
            </summary>
            <param name="componentTypes">The types of the component to react to their addition.</param>
        </member>
        <member name="T:DefaultEcs.System.WhenAddedEitherAttribute">
            <summary>
            Represents a group of component types to react to at least one of their addition when building the inner <see cref="T:DefaultEcs.EntitySet"/> of <see cref="T:DefaultEcs.System.AEntitySetSystem`1"/> when giving a <see cref="T:DefaultEcs.World"/> instance.
            </summary>
        </member>
        <member name="M:DefaultEcs.System.WhenAddedEitherAttribute.#ctor(System.Type[])">
            <summary>
            Initialize a new instance of the <see cref="T:DefaultEcs.System.WithEitherAttribute"/> type.
            </summary>
            <param name="componentTypes">The types of the component to react to their addition.</param>
        </member>
        <member name="T:DefaultEcs.System.WhenChangedAttribute">
            <summary>
            Represents a component type to react to its change when building the inner <see cref="T:DefaultEcs.EntitySet"/> of <see cref="T:DefaultEcs.System.AEntitySetSystem`1"/> when giving a <see cref="T:DefaultEcs.World"/> instance.
            </summary>
        </member>
        <member name="M:DefaultEcs.System.WhenChangedAttribute.#ctor(System.Type[])">
            <summary>
            Initialize a new instance of the <see cref="T:DefaultEcs.System.WhenChangedAttribute"/> type.
            </summary>
            <param name="componentTypes">The types of the component to react to their change.</param>
        </member>
        <member name="T:DefaultEcs.System.WhenChangedEitherAttribute">
            <summary>
            Represents a group of component types to react to at least one of their change when building the inner <see cref="T:DefaultEcs.EntitySet"/> of <see cref="T:DefaultEcs.System.AEntitySetSystem`1"/> when giving a <see cref="T:DefaultEcs.World"/> instance.
            </summary>
        </member>
        <member name="M:DefaultEcs.System.WhenChangedEitherAttribute.#ctor(System.Type[])">
            <summary>
            Initialize a new instance of the <see cref="T:DefaultEcs.System.WithEitherAttribute"/> type.
            </summary>
            <param name="componentTypes">The types of the component to react to their change.</param>
        </member>
        <member name="T:DefaultEcs.System.WhenRemovedAttribute">
            <summary>
            Represents a component type to react to its deletion when building the inner <see cref="T:DefaultEcs.EntitySet"/> of <see cref="T:DefaultEcs.System.AEntitySetSystem`1"/> when giving a <see cref="T:DefaultEcs.World"/> instance.
            </summary>
        </member>
        <member name="M:DefaultEcs.System.WhenRemovedAttribute.#ctor(System.Type[])">
            <summary>
            Initialize a new instance of the <see cref="T:DefaultEcs.System.WhenRemovedAttribute"/> type.
            </summary>
            <param name="componentTypes">The types of the component to react to their deletion.</param>
        </member>
        <member name="T:DefaultEcs.System.WhenRemovedEitherAttribute">
            <summary>
            Represents a group of component types to react to at least one of their deletion when building the inner <see cref="T:DefaultEcs.EntitySet"/> of <see cref="T:DefaultEcs.System.AEntitySetSystem`1"/> when giving a <see cref="T:DefaultEcs.World"/> instance.
            </summary>
        </member>
        <member name="M:DefaultEcs.System.WhenRemovedEitherAttribute.#ctor(System.Type[])">
            <summary>
            Initialize a new instance of the <see cref="T:DefaultEcs.System.WithEitherAttribute"/> type.
            </summary>
            <param name="componentTypes">The types of the component to react to their change.</param>
        </member>
        <member name="T:DefaultEcs.System.ISystem`1">
            <summary>
            Exposes a method to update a system.
            </summary>
            <typeparam name="T">The type of the object used as state to update the system.</typeparam>
        </member>
        <member name="P:DefaultEcs.System.ISystem`1.IsEnabled">
            <summary>
            Gets or sets whether the current <see cref="T:DefaultEcs.System.ISystem`1"/> instance should update or not.
            </summary>
        </member>
        <member name="M:DefaultEcs.System.ISystem`1.Update(`0)">
            <summary>
            Updates the system once.
            Does nothing if <see cref="P:DefaultEcs.System.ISystem`1.IsEnabled"/> is false.
            </summary>
            <param name="state">The state to use.</param>
        </member>
        <member name="T:DefaultEcs.System.ParallelSystem`1">
            <summary>
            Represents a collection of <see cref="T:DefaultEcs.System.ISystem`1"/> to update in parallel.
            </summary>
            <typeparam name="T">The type of the object used as state to update the systems.</typeparam>
        </member>
        <member name="M:DefaultEcs.System.ParallelSystem`1.#ctor(DefaultEcs.System.ISystem{`0},DefaultEcs.Threading.IParallelRunner,System.Collections.Generic.IEnumerable{DefaultEcs.System.ISystem{`0}})">
            <summary>
            Initialises a new instance of the <see cref="T:DefaultEcs.System.ParallelSystem`1"/> class.
            </summary>
            <param name="mainSystem">The <see cref="T:DefaultEcs.System.ISystem`1"/> instance to be updated on the calling thread.</param>
            <param name="runner">The <see cref="T:DefaultEcs.Threading.IParallelRunner"/> used to process the update in parallel if not null.</param>
            <param name="systems">The <see cref="T:DefaultEcs.System.ISystem`1"/> instances.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="runner"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="systems"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.System.ParallelSystem`1.#ctor(DefaultEcs.System.ISystem{`0},DefaultEcs.Threading.IParallelRunner,DefaultEcs.System.ISystem{`0}[])">
            <summary>
            Initialises a new instance of the <see cref="T:DefaultEcs.System.ParallelSystem`1"/> class.
            </summary>
            <param name="mainSystem">The <see cref="T:DefaultEcs.System.ISystem`1"/> instance to be updated on the calling thread.</param>
            <param name="runner">The <see cref="T:DefaultEcs.Threading.IParallelRunner"/> used to process the update in parallel if not null.</param>
            <param name="systems">The <see cref="T:DefaultEcs.System.ISystem`1"/> instances.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="runner"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="systems"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.System.ParallelSystem`1.#ctor(DefaultEcs.Threading.IParallelRunner,System.Collections.Generic.IEnumerable{DefaultEcs.System.ISystem{`0}})">
            <summary>
            Initialises a new instance of the <see cref="T:DefaultEcs.System.ParallelSystem`1"/> class.
            </summary>
            <param name="runner">The <see cref="T:DefaultEcs.Threading.IParallelRunner"/> used to process the update in parallel if not null.</param>
            <param name="systems">The <see cref="T:DefaultEcs.System.ISystem`1"/> instances.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="runner"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="systems"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.System.ParallelSystem`1.#ctor(DefaultEcs.Threading.IParallelRunner,DefaultEcs.System.ISystem{`0}[])">
            <summary>
            Initialises a new instance of the <see cref="T:DefaultEcs.System.ParallelSystem`1"/> class.
            </summary>
            <param name="runner">The <see cref="T:DefaultEcs.Threading.IParallelRunner"/> used to process the update in parallel if not null.</param>
            <param name="systems">The <see cref="T:DefaultEcs.System.ISystem`1"/> instances.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="runner"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="systems"/> is null.</exception>
        </member>
        <member name="P:DefaultEcs.System.ParallelSystem`1.IsEnabled">
            <summary>
            Gets or sets whether the current <see cref="T:DefaultEcs.System.ParallelSystem`1"/> instance should update or not.
            </summary>
        </member>
        <member name="M:DefaultEcs.System.ParallelSystem`1.Update(`0)">
            <summary>
            Updates the system once.
            </summary>
            <param name="state">The state to use.</param>
        </member>
        <member name="M:DefaultEcs.System.ParallelSystem`1.Dispose">
            <summary>
            Disposes all the inner <see cref="T:DefaultEcs.System.ISystem`1"/> instances.
            </summary>
        </member>
        <member name="T:DefaultEcs.System.SequentialSystem`1">
            <summary>
            Represents a collection of <see cref="T:DefaultEcs.System.ISystem`1"/> to update sequentially.
            </summary>
            <typeparam name="T">The type of the object used as state to update the systems.</typeparam>
        </member>
        <member name="M:DefaultEcs.System.SequentialSystem`1.#ctor(System.Collections.Generic.IEnumerable{DefaultEcs.System.ISystem{`0}})">
            <summary>
            Initialises a new instance of the <see cref="T:DefaultEcs.System.SequentialSystem`1"/> class.
            </summary>
            <param name="systems">The <see cref="T:DefaultEcs.System.ISystem`1"/> instances.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="systems"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.System.SequentialSystem`1.#ctor(DefaultEcs.System.ISystem{`0}[])">
            <summary>
            Initialises a new instance of the <see cref="T:DefaultEcs.System.SequentialSystem`1"/> class.
            </summary>
            <param name="systems">The <see cref="T:DefaultEcs.System.ISystem`1"/> instances.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="systems"/> is null.</exception>
        </member>
        <member name="P:DefaultEcs.System.SequentialSystem`1.IsEnabled">
            <summary>
            Gets or sets whether the current <see cref="T:DefaultEcs.System.SequentialSystem`1"/> instance should update or not.
            </summary>
        </member>
        <member name="M:DefaultEcs.System.SequentialSystem`1.Update(`0)">
            <summary>
            Updates all the systems once sequentially.
            </summary>
            <param name="state">The state to use.</param>
        </member>
        <member name="M:DefaultEcs.System.SequentialSystem`1.Dispose">
            <summary>
            Disposes all the inner <see cref="T:DefaultEcs.System.ISystem`1"/> instances.
            </summary>
        </member>
        <member name="T:DefaultEcs.Threading.NamespaceDoc">
            <summary>
            The <see cref="N:DefaultEcs.Threading"/> namespace contains types used for multithreading operations.
            </summary>
        </member>
        <member name="T:DefaultEcs.Threading.DefaultParallelRunner">
            <summary>
            Represents an object used to run an <see cref="T:DefaultEcs.Threading.IParallelRunnable"/> by using multiple <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
        </member>
        <member name="M:DefaultEcs.Threading.DefaultParallelRunner.#ctor(System.Int32)">
            <summary>
            Initialises a new instance of the <see cref="T:DefaultEcs.Threading.DefaultParallelRunner"/> class.
            </summary>
            <param name="degreeOfParallelism">The number of concurrent <see cref="T:System.Threading.Tasks.Task"/> used to update an <see cref="T:DefaultEcs.Threading.IParallelRunnable"/> in parallel.</param>
            <exception cref="T:System.ArgumentException"><paramref name="degreeOfParallelism"/> cannot be inferior to one.</exception>
        </member>
        <member name="P:DefaultEcs.Threading.DefaultParallelRunner.DegreeOfParallelism">
            <summary>
            Gets the degree of parallelism used to run an <see cref="T:DefaultEcs.Threading.IParallelRunnable"/>.
            </summary>
        </member>
        <member name="M:DefaultEcs.Threading.DefaultParallelRunner.Run(DefaultEcs.Threading.IParallelRunnable)">
            <summary>
            Runs the provided <see cref="T:DefaultEcs.Threading.IParallelRunnable"/>.
            </summary>
            <param name="runnable">The <see cref="T:DefaultEcs.Threading.IParallelRunnable"/> to run.</param>
        </member>
        <member name="M:DefaultEcs.Threading.DefaultParallelRunner.Dispose">
            <summary>
            Releases all the resources used by the current <see cref="T:DefaultEcs.Threading.DefaultParallelRunner"/> instance.
            </summary>
        </member>
        <member name="T:DefaultEcs.Threading.IParallelRunnable">
            <summary>
            Exposes a method to run a process in parallel.
            </summary>
        </member>
        <member name="M:DefaultEcs.Threading.IParallelRunnable.Run(System.Int32,System.Int32)">
            <summary>
            Runs the part <paramref name="index"/> out of <paramref name="maxIndex"/> of the process.
            </summary>
            <param name="index"></param>
            <param name="maxIndex"></param>
        </member>
        <member name="T:DefaultEcs.Threading.IParallelRunner">
            <summary>
            Exposes a method to run in parallel a <see cref="T:DefaultEcs.Threading.IParallelRunnable"/>.
            </summary>
        </member>
        <member name="P:DefaultEcs.Threading.IParallelRunner.DegreeOfParallelism">
            <summary>
            Gets the degree of parallelism used to run an <see cref="T:DefaultEcs.Threading.IParallelRunnable"/>.
            </summary>
        </member>
        <member name="M:DefaultEcs.Threading.IParallelRunner.Run(DefaultEcs.Threading.IParallelRunnable)">
            <summary>
            Runs the provided <see cref="T:DefaultEcs.Threading.IParallelRunnable"/>.
            </summary>
            <param name="runnable">The <see cref="T:DefaultEcs.Threading.IParallelRunnable"/> to run.</param>
        </member>
        <member name="T:DefaultEcs.Entity">
            <summary>
            Represents an item in the <see cref="T:DefaultEcs.World"/>.
            Only use <see cref="T:DefaultEcs.Entity"/> generated from the <see cref="M:DefaultEcs.World.CreateEntity"/> method.
            </summary>
        </member>
        <member name="P:DefaultEcs.Entity.World">
            <summary>
            Gets the <see cref="T:DefaultEcs.World"/> instance from which current <see cref="T:DefaultEcs.Entity"/> originate.
            </summary>
        </member>
        <member name="P:DefaultEcs.Entity.IsAlive">
            <summary>
            Gets whether the current <see cref="T:DefaultEcs.Entity"/> is alive or not.
            </summary>
            <returns>true if the <see cref="T:DefaultEcs.Entity"/> is alive; otherwise, false.</returns>
        </member>
        <member name="M:DefaultEcs.Entity.IsEnabled">
            <summary>
            Gets whether the current <see cref="T:DefaultEcs.Entity"/> is enabled or not.
            </summary>
            <returns>true if the <see cref="T:DefaultEcs.Entity"/> is enabled; otherwise, false.</returns>
        </member>
        <member name="M:DefaultEcs.Entity.Enable">
            <summary>
            Enables the current <see cref="T:DefaultEcs.Entity"/> so it can appear in <see cref="T:DefaultEcs.EntitySet"/>.
            This method is not thread safe.
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="T:DefaultEcs.Entity"/> was not created from a <see cref="T:DefaultEcs.World"/>.</exception>
        </member>
        <member name="M:DefaultEcs.Entity.Disable">
            <summary>
            Disables the current <see cref="T:DefaultEcs.Entity"/> so it does not appear in <see cref="T:DefaultEcs.EntitySet"/>.
            This method is not thread safe.
            </summary>
            <exception cref="T:System.InvalidOperationException"><see cref="T:DefaultEcs.Entity"/> was not created from a <see cref="T:DefaultEcs.World"/>.</exception>
        </member>
        <member name="M:DefaultEcs.Entity.IsEnabled``1">
            <summary>
            Gets whether the current <see cref="T:DefaultEcs.Entity"/> component of type <typeparamref name="T"/> is enabled or not.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <returns>true if the <see cref="T:DefaultEcs.Entity"/> has a component of type <typeparamref name="T"/> enabled; otherwise, false.</returns>
        </member>
        <member name="M:DefaultEcs.Entity.Enable``1">
            <summary>
            Enables the current <see cref="T:DefaultEcs.Entity"/> component of type <typeparamref name="T"/> so it can appear in <see cref="T:DefaultEcs.EntitySet"/>.
            Does nothing if current <see cref="T:DefaultEcs.Entity"/> does not have a component of type <typeparamref name="T"/>.
            This method is not thread safe.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <exception cref="T:System.InvalidOperationException"><see cref="T:DefaultEcs.Entity"/> was not created from a <see cref="T:DefaultEcs.World"/>.</exception>
        </member>
        <member name="M:DefaultEcs.Entity.Disable``1">
            <summary>
            Disables the current <see cref="T:DefaultEcs.Entity"/> component of type <typeparamref name="T"/> so it does not appear in <see cref="T:DefaultEcs.EntitySet"/>.
            Does nothing if current <see cref="T:DefaultEcs.Entity"/> does not have a component of type <typeparamref name="T"/>.
            This method is not thread safe.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <exception cref="T:System.InvalidOperationException"><see cref="T:DefaultEcs.Entity"/> was not created from a <see cref="T:DefaultEcs.World"/>.</exception>
        </member>
        <member name="M:DefaultEcs.Entity.Set``1(``0@)">
            <summary>
            Sets the value of the component of type <typeparamref name="T"/> on the current <see cref="T:DefaultEcs.Entity"/>.
            This method is not thread safe.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <param name="component">The value of the component.</param>
            <exception cref="T:System.InvalidOperationException"><see cref="T:DefaultEcs.Entity"/> was not created from a <see cref="T:DefaultEcs.World"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Max number of component of type <typeparamref name="T"/> reached.</exception>
        </member>
        <member name="M:DefaultEcs.Entity.Set``1">
            <summary>
            Sets the value of the component of type <typeparamref name="T"/> to its default value on the current <see cref="T:DefaultEcs.Entity"/>.
            This method is not thread safe.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <exception cref="T:System.InvalidOperationException"><see cref="T:DefaultEcs.Entity"/> was not created from a <see cref="T:DefaultEcs.World"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Max number of component of type <typeparamref name="T"/> reached.</exception>
        </member>
        <member name="M:DefaultEcs.Entity.SetSameAs``1(DefaultEcs.Entity@)">
            <summary>
            Sets the value of the component of type <typeparamref name="T"/> on the current <see cref="T:DefaultEcs.Entity"/> to the same instance of an other <see cref="T:DefaultEcs.Entity"/>.
            This method is not thread safe.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <param name="reference">The other <see cref="T:DefaultEcs.Entity"/> used as reference.</param>
            <exception cref="T:System.InvalidOperationException"><see cref="T:DefaultEcs.Entity"/> was not created from a <see cref="T:DefaultEcs.World"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Reference <see cref="T:DefaultEcs.Entity"/> comes from a different <see cref="T:DefaultEcs.World"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Reference <see cref="T:DefaultEcs.Entity"/> does not have a component of type <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:DefaultEcs.Entity.SetSameAsWorld``1">
            <summary>
            Sets the value of the component of type <typeparamref name="T"/> on the current <see cref="T:DefaultEcs.Entity"/> to the same instance of an other <see cref="T:DefaultEcs.Entity"/>.
            This method is not thread safe.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <exception cref="T:System.InvalidOperationException"><see cref="T:DefaultEcs.Entity"/> was not created from a <see cref="T:DefaultEcs.World"/>.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="P:DefaultEcs.Entity.World"/> does not have a component of type <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:DefaultEcs.Entity.Remove``1">
            <summary>
            Removes the component of type <typeparamref name="T"/> on the current <see cref="T:DefaultEcs.Entity"/>.
            This method is not thread safe.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
        </member>
        <member name="M:DefaultEcs.Entity.NotifyChanged``1">
            <summary>
            Notifies the value of the component of type <typeparamref name="T"/> has changed.
            This method is not thread safe.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <exception cref="T:System.InvalidOperationException"><see cref="T:DefaultEcs.Entity"/> was not created from a <see cref="T:DefaultEcs.World"/>.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="T:DefaultEcs.Entity"/> does not have a component of type <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:DefaultEcs.Entity.Has``1">
            <summary>
            Returns whether the current <see cref="T:DefaultEcs.Entity"/> has a component of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <returns>true if the <see cref="T:DefaultEcs.Entity"/> has a component of type <typeparamref name="T"/>; otherwise, false.</returns>
        </member>
        <member name="M:DefaultEcs.Entity.Get``1">
            <summary>
            Gets the component of type <typeparamref name="T"/> on the current <see cref="T:DefaultEcs.Entity"/>.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <returns>A reference to the component.</returns>
            <exception cref="T:System.Exception"><see cref="T:DefaultEcs.Entity"/> was not created from a <see cref="T:DefaultEcs.World"/> or does not have a component of type <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:DefaultEcs.Entity.CopyTo(DefaultEcs.World,DefaultEcs.ComponentCloner)">
            <summary>
            Creates a copy of current <see cref="T:DefaultEcs.Entity"/> with all of its components in the given <see cref="T:DefaultEcs.World"/> using the given <see cref="T:DefaultEcs.ComponentCloner"/>.
            This method is not thread safe.
            </summary>
            <param name="world">The <see cref="T:DefaultEcs.World"/> instance to which copy current <see cref="T:DefaultEcs.Entity"/> and its components.</param>
            <param name="cloner">The <see cref="T:DefaultEcs.ComponentCloner"/> to use to copy the components.</param>
            <returns>The created <see cref="T:DefaultEcs.Entity"/> in the given <see cref="T:DefaultEcs.World"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="world"/> or <paramref name="cloner"/> was null.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="T:DefaultEcs.Entity"/> was not created from a <see cref="T:DefaultEcs.World"/>.</exception>
        </member>
        <member name="M:DefaultEcs.Entity.CopyTo(DefaultEcs.World)">
            <summary>
            Creates a copy of current <see cref="T:DefaultEcs.Entity"/> with all of its components in the given <see cref="T:DefaultEcs.World"/>.
            This method is not thread safe.
            </summary>
            <param name="world">The <see cref="T:DefaultEcs.World"/> instance to which copy current <see cref="T:DefaultEcs.Entity"/> and its components.</param>
            <returns>The created <see cref="T:DefaultEcs.Entity"/> in the given <see cref="T:DefaultEcs.World"/>.</returns>
            <exception cref="T:System.InvalidOperationException"><see cref="T:DefaultEcs.Entity"/> was not created from a <see cref="T:DefaultEcs.World"/>.</exception>
        </member>
        <member name="M:DefaultEcs.Entity.ReadAllComponents(DefaultEcs.Serialization.IComponentReader)">
            <summary>
            Calls on <paramref name="reader"/> with all the component of the current <see cref="T:DefaultEcs.Entity"/>.
            This method is primiraly used for serialization purpose and should not be called in game logic.
            </summary>
            <param name="reader">The <see cref="T:DefaultEcs.Serialization.IComponentReader"/> instance to be used as callback with the current <see cref="T:DefaultEcs.Entity"/> components.</param>
        </member>
        <member name="M:DefaultEcs.Entity.Dispose">
            <summary>
            Clean the current <see cref="T:DefaultEcs.Entity"/> of all its components.
            The current <see cref="T:DefaultEcs.Entity"/> should not be used again after calling this method and <see cref="P:DefaultEcs.Entity.IsAlive"/> will return false.
            </summary>
        </member>
        <member name="M:DefaultEcs.Entity.Equals(DefaultEcs.Entity)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="M:DefaultEcs.Entity.op_Equality(DefaultEcs.Entity,DefaultEcs.Entity)">
            <summary>Determines whether two specified entities are the same.</summary>
            <param name="a">The first <see cref="T:DefaultEcs.Entity"/> to compare.</param>
            <param name="b">The second <see cref="T:DefaultEcs.Entity"/> to compare.</param>
            <returns>
            true if the value of <paramref name="a" /> is the same as the value of <paramref name="b" />;
            otherwise, false.
            </returns>
        </member>
        <member name="M:DefaultEcs.Entity.op_Inequality(DefaultEcs.Entity,DefaultEcs.Entity)">
            <summary>Determines whether two specified entities are not the same.</summary>
            <param name="a">The first <see cref="T:DefaultEcs.Entity"/> to compare.</param>
            <param name="b">The second <see cref="T:DefaultEcs.Entity"/> to compare.</param>
            <returns>
            true if the value of <paramref name="a" /> is not the same as the value of <paramref name="b" />;
            otherwise, false.
            </returns>
        </member>
        <member name="M:DefaultEcs.Entity.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns>
            true if obj and this instance are the same type and represent the same value;
            otherwise, false.
            </returns>
        </member>
        <member name="M:DefaultEcs.Entity.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:DefaultEcs.Entity.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
            <returns>A string representing this instance.</returns>
        </member>
        <member name="T:DefaultEcs.EntityMap`1">
            <summary>
            Represents a collection of <see cref="T:DefaultEcs.Entity"/> mapped to a <typeparamref name="TKey"/> component. Only one <see cref="T:DefaultEcs.Entity"/> can be associated with a given <typeparamref name="TKey"/>.
            </summary>
            <typeparam name="TKey">The type of the component used as key.</typeparam>
        </member>
        <member name="T:DefaultEcs.EntityMap`1.KeyEnumerable">
            <summary>
            Allows to enumerate the <typeparamref name="TKey"/> of a <see cref="T:DefaultEcs.EntityMap`1" />.
            </summary>
        </member>
        <member name="M:DefaultEcs.EntityMap`1.KeyEnumerable.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:DefaultEcs.EntityMap`1.KeyEnumerable.System#Collections#Generic#IEnumerable{TKey}#GetEnumerator">
            <inheritdoc cref="M:DefaultEcs.EntityMap`1.KeyEnumerable.GetEnumerator" />
        </member>
        <member name="M:DefaultEcs.EntityMap`1.KeyEnumerable.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:DefaultEcs.EntityMap`1.KeyEnumerable.GetEnumerator" />
        </member>
        <member name="T:DefaultEcs.EntityMap`1.KeyEnumerator">
            <summary>
            Enumerates the <typeparamref name="TKey"/> of a <see cref="T:DefaultEcs.EntityMap`1" />.
            </summary>
        </member>
        <member name="P:DefaultEcs.EntityMap`1.KeyEnumerator.Current">
            <summary>
            Gets the <typeparamref name="TKey"/> at the current position of the enumerator.
            </summary>
            <returns>The <typeparamref name="TKey"/> at the current position of the enumerator.</returns>
        </member>
        <member name="P:DefaultEcs.EntityMap`1.KeyEnumerator.System#Collections#IEnumerator#Current">
            <inheritdoc cref="P:DefaultEcs.EntityMap`1.KeyEnumerator.Current" />
        </member>
        <member name="M:DefaultEcs.EntityMap`1.KeyEnumerator.MoveNext">
            <summary>Advances the enumerator to the next <typeparamref name="TKey"/> of the <see cref="T:DefaultEcs.EntityMap`1" />.</summary>
            <returns>true if the enumerator was successfully advanced to the next <typeparamref name="TKey"/>; false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:DefaultEcs.EntityMap`1.KeyEnumerator.System#Collections#IEnumerator#Reset">
            <inheritdoc />
        </member>
        <member name="M:DefaultEcs.EntityMap`1.KeyEnumerator.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:DefaultEcs.EntityMap`1.KeyEnumerator" />.
            </summary>
        </member>
        <member name="P:DefaultEcs.EntityMap`1.Keys">
            <summary>
            Gets the keys contained in the <see cref="T:DefaultEcs.EntityMap`1"/>.
            </summary>
        </member>
        <member name="P:DefaultEcs.EntityMap`1.Item(`0)">
            <summary>
            Gets the <see cref="T:DefaultEcs.Entity"/> associated with the specified key.
            </summary>
            <param name="key">The key of the <see cref="T:DefaultEcs.Entity"/> to get.</param>
            <returns>The <see cref="T:DefaultEcs.Entity"/> associated with the specified key.</returns>
        </member>
        <member name="M:DefaultEcs.EntityMap`1.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:DefaultEcs.EntityMap`1"/> contains the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:DefaultEcs.EntityMap`1"/>.</param>
            <returns>true if the <see cref="T:DefaultEcs.EntityMap`1"/> contains the specified key; otherwise, false.</returns>
        </member>
        <member name="M:DefaultEcs.EntityMap`1.TryGetEntity(`0,DefaultEcs.Entity@)">
            <summary>
            Gets the <see cref="T:DefaultEcs.Entity"/> associated with the specified key.
            </summary>
            <param name="key">The key of the <see cref="T:DefaultEcs.Entity"/> to get.</param>
            <param name="entity">When this method returns, contains the <see cref="T:DefaultEcs.Entity"/> associated with the specified key, if the key is found; otherwise, an invalid <see cref="T:DefaultEcs.Entity"/>. This parameter is passed uninitialized.</param>
            <returns>true if the <see cref="T:DefaultEcs.EntityMap`1"/> contains an <see cref="T:DefaultEcs.Entity"/> with the specified key; otherwise, false.</returns>
        </member>
        <member name="P:DefaultEcs.EntityMap`1.World">
            <inheritdoc/>
        </member>
        <member name="E:DefaultEcs.EntityMap`1.EntityAdded">
            <inheritdoc/>
        </member>
        <member name="E:DefaultEcs.EntityMap`1.EntityRemoved">
            <inheritdoc/>
        </member>
        <member name="M:DefaultEcs.EntityMap`1.Contains(DefaultEcs.Entity@)">
            <inheritdoc/>
        </member>
        <member name="M:DefaultEcs.EntityMap`1.Complete">
            <inheritdoc/>
        </member>
        <member name="M:DefaultEcs.EntityMap`1.TrimExcess">
            <inheritdoc/>
        </member>
        <member name="M:DefaultEcs.EntityMap`1.Dispose">
            <summary>
            Releases current <see cref="T:DefaultEcs.EntityMap`1"/> of its subscriptions, stopping it to get modifications on the <see cref="T:DefaultEcs.World"/>'s <see cref="T:DefaultEcs.Entity"/>.
            </summary>
        </member>
        <member name="T:DefaultEcs.EntityMultiMap`1">
            <summary>
            Represents a collection of <see cref="T:DefaultEcs.Entity"/> mapped to a <typeparamref name="TKey"/> component. Multiple <see cref="T:DefaultEcs.Entity"/> can be associated with a given <typeparamref name="TKey"/>.
            </summary>
            <typeparam name="TKey">The type of the component used as key.</typeparam>
        </member>
        <member name="T:DefaultEcs.EntityMultiMap`1.KeyEnumerable">
            <summary>
            Allows to enumerate the <typeparamref name="TKey"/> of a <see cref="T:DefaultEcs.EntityMultiMap`1" />.
            </summary>
        </member>
        <member name="M:DefaultEcs.EntityMultiMap`1.KeyEnumerable.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:DefaultEcs.EntityMultiMap`1.KeyEnumerable.System#Collections#Generic#IEnumerable{TKey}#GetEnumerator">
            <inheritdoc cref="M:DefaultEcs.EntityMultiMap`1.KeyEnumerable.GetEnumerator" />
        </member>
        <member name="M:DefaultEcs.EntityMultiMap`1.KeyEnumerable.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:DefaultEcs.EntityMultiMap`1.KeyEnumerable.GetEnumerator" />
        </member>
        <member name="T:DefaultEcs.EntityMultiMap`1.KeyEnumerator">
            <summary>
            Enumerates the <typeparamref name="TKey"/> of a <see cref="T:DefaultEcs.EntityMultiMap`1" />.
            </summary>
        </member>
        <member name="P:DefaultEcs.EntityMultiMap`1.KeyEnumerator.Current">
            <summary>
            Gets the <typeparamref name="TKey"/> at the current position of the enumerator.
            </summary>
            <returns>The <typeparamref name="TKey"/> at the current position of the enumerator.</returns>
        </member>
        <member name="P:DefaultEcs.EntityMultiMap`1.KeyEnumerator.System#Collections#IEnumerator#Current">
            <inheritdoc cref="P:DefaultEcs.EntityMultiMap`1.KeyEnumerator.Current" />
        </member>
        <member name="M:DefaultEcs.EntityMultiMap`1.KeyEnumerator.MoveNext">
            <summary>Advances the enumerator to the next <typeparamref name="TKey"/> of the <see cref="T:DefaultEcs.EntityMultiMap`1" />.</summary>
            <returns>true if the enumerator was successfully advanced to the next <typeparamref name="TKey"/>; false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:DefaultEcs.EntityMultiMap`1.KeyEnumerator.System#Collections#IEnumerator#Reset">
            <inheritdoc />
        </member>
        <member name="M:DefaultEcs.EntityMultiMap`1.KeyEnumerator.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:DefaultEcs.EntityMultiMap`1.KeyEnumerator" />.
            </summary>
        </member>
        <member name="P:DefaultEcs.EntityMultiMap`1.Keys">
            <summary>
            Gets the keys contained in the <see cref="T:DefaultEcs.EntityMultiMap`1"/>.
            </summary>
        </member>
        <member name="P:DefaultEcs.EntityMultiMap`1.Item(`0)">
            <summary>
            Gets the <see cref="T:DefaultEcs.Entity"/> instances associated with the specified key.
            </summary>
            <param name="key">The key of the <see cref="T:DefaultEcs.Entity"/> instances to get.</param>
            <returns>The <see cref="T:DefaultEcs.Entity"/> instances associated with the specified key.</returns>
        </member>
        <member name="M:DefaultEcs.EntityMultiMap`1.Count(`0)">
            <summary>
            Gets the number of <see cref="T:DefaultEcs.Entity"/> in the current <see cref="T:DefaultEcs.EntityMultiMap`1"/> for the given <typeparamref name="TKey"/>.
            </summary>
            <param name="key">The key to locate in the <see cref="T:DefaultEcs.EntityMultiMap`1"/>.</param>
            <returns>The number of <see cref="T:DefaultEcs.Entity"/> in the current <see cref="T:DefaultEcs.EntityMultiMap`1"/> for the given <typeparamref name="TKey"/>.</returns>
        </member>
        <member name="M:DefaultEcs.EntityMultiMap`1.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:DefaultEcs.EntityMultiMap`1"/> contains the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:DefaultEcs.EntityMultiMap`1"/>.</param>
            <returns>true if the <see cref="T:DefaultEcs.EntityMultiMap`1"/> contains the specified key; otherwise, false.</returns>
        </member>
        <member name="M:DefaultEcs.EntityMultiMap`1.TryGetEntities(`0,System.ReadOnlySpan{DefaultEcs.Entity}@)">
            <summary>
            Gets the <see cref="T:DefaultEcs.Entity"/> instances associated with the specified key.
            </summary>
            <param name="key">The key of the <see cref="T:DefaultEcs.Entity"/> instances to get.</param>
            <param name="entities">When this method returns, contains the <see cref="T:DefaultEcs.Entity"/> instances associated with the specified key, if the key is found; otherwise, the type default value. This parameter is passed uninitialized.</param>
            <returns>true if the <see cref="T:DefaultEcs.EntityMultiMap`1"/> contains <see cref="T:DefaultEcs.Entity"/> instances with the specified key; otherwise, false.</returns>
        </member>
        <member name="P:DefaultEcs.EntityMultiMap`1.World">
            <inheritdoc/>
        </member>
        <member name="E:DefaultEcs.EntityMultiMap`1.EntityAdded">
            <inheritdoc/>
        </member>
        <member name="E:DefaultEcs.EntityMultiMap`1.EntityRemoved">
            <inheritdoc/>
        </member>
        <member name="M:DefaultEcs.EntityMultiMap`1.Contains(DefaultEcs.Entity@)">
            <inheritdoc/>
        </member>
        <member name="M:DefaultEcs.EntityMultiMap`1.Complete">
            <inheritdoc/>
        </member>
        <member name="M:DefaultEcs.EntityMultiMap`1.TrimExcess">
            <inheritdoc/>
        </member>
        <member name="M:DefaultEcs.EntityMultiMap`1.Dispose">
            <summary>
            Releases current <see cref="T:DefaultEcs.EntitySet"/> of its subscriptions, stopping it to get modifications on the <see cref="P:DefaultEcs.EntityMultiMap`1.World"/>'s <see cref="T:DefaultEcs.Entity"/>.
            </summary>
        </member>
        <member name="T:DefaultEcs.EntityQueryBuilder">
            <summary>
            Represent an helper object to create rules to retrieve a specific subset of <see cref="T:DefaultEcs.Entity"/>.
            </summary>
        </member>
        <member name="T:DefaultEcs.EntityQueryBuilder.EitherBuilder">
            <summary>
            Represents an helper object to create an either group rule to retrieve a specific subset of <see cref="T:DefaultEcs.Entity"/>.
            </summary>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.EitherBuilder.Or``1">
            <summary>
            Add the type <typeparamref name="T"/> to current either group.
            </summary>
            <typeparam name="T">The type of component to add to the either group.</typeparam>
            <returns>The current <see cref="T:DefaultEcs.EntityQueryBuilder.EitherBuilder"/>.</returns>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.EitherBuilder.With``1">
            <inheritdoc cref="M:DefaultEcs.EntityQueryBuilder.With``1"/>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.EitherBuilder.With``1(DefaultEcs.ComponentPredicate{``0})">
            <inheritdoc cref="M:DefaultEcs.EntityQueryBuilder.With``1(DefaultEcs.ComponentPredicate{``0})"/>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.EitherBuilder.Without``1">
            <inheritdoc cref="M:DefaultEcs.EntityQueryBuilder.Without``1"/>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.EitherBuilder.WhenAdded``1">
            <inheritdoc cref="M:DefaultEcs.EntityQueryBuilder.WhenAdded``1"/>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.EitherBuilder.WhenChanged``1">
            <inheritdoc cref="M:DefaultEcs.EntityQueryBuilder.WhenChanged``1"/>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.EitherBuilder.WhenRemoved``1">
            <inheritdoc cref="M:DefaultEcs.EntityQueryBuilder.WhenRemoved``1"/>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.EitherBuilder.WithEither``1">
            <inheritdoc cref="M:DefaultEcs.EntityQueryBuilder.WithEither``1"/>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.EitherBuilder.WithoutEither``1">
            <inheritdoc cref="M:DefaultEcs.EntityQueryBuilder.WithoutEither``1"/>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.EitherBuilder.WhenAddedEither``1">
            <inheritdoc cref="M:DefaultEcs.EntityQueryBuilder.WhenAddedEither``1"/>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.EitherBuilder.WhenChangedEither``1">
            <inheritdoc cref="M:DefaultEcs.EntityQueryBuilder.WhenChangedEither``1"/>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.EitherBuilder.WhenRemovedEither``1">
            <inheritdoc cref="M:DefaultEcs.EntityQueryBuilder.WhenRemovedEither``1"/>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.EitherBuilder.Copy">
            <inheritdoc cref="M:DefaultEcs.EntityQueryBuilder.Copy"/>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.EitherBuilder.AsPredicate">
            <inheritdoc cref="M:DefaultEcs.EntityQueryBuilder.AsPredicate"/>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.EitherBuilder.AsEnumerable">
            <inheritdoc cref="M:DefaultEcs.EntityQueryBuilder.AsEnumerable"/>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.EitherBuilder.AsSet">
            <inheritdoc cref="M:DefaultEcs.EntityQueryBuilder.AsSet"/>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.EitherBuilder.AsSortedSet``1(System.Collections.Generic.IComparer{``0})">
            <inheritdoc cref="M:DefaultEcs.EntityQueryBuilder.AsSortedSet``1(System.Collections.Generic.IComparer{``0})"/>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.EitherBuilder.AsSortedSet``1">
            <inheritdoc cref="M:DefaultEcs.EntityQueryBuilder.AsSortedSet``1"/>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.EitherBuilder.AsMap``1(System.Int32,System.Collections.Generic.IEqualityComparer{``0})">
            <inheritdoc cref="M:DefaultEcs.EntityQueryBuilder.AsMap``1(System.Int32,System.Collections.Generic.IEqualityComparer{``0})"/>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.EitherBuilder.AsMap``1(System.Collections.Generic.IEqualityComparer{``0})">
            <inheritdoc cref="M:DefaultEcs.EntityQueryBuilder.AsMap``1(System.Collections.Generic.IEqualityComparer{``0})"/>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.EitherBuilder.AsMap``1(System.Int32)">
            <inheritdoc cref="M:DefaultEcs.EntityQueryBuilder.AsMap``1(System.Int32)"/>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.EitherBuilder.AsMap``1">
            <inheritdoc cref="M:DefaultEcs.EntityQueryBuilder.AsMap``1"/>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.EitherBuilder.AsMultiMap``1(System.Int32,System.Collections.Generic.IEqualityComparer{``0})">
            <inheritdoc cref="M:DefaultEcs.EntityQueryBuilder.AsMultiMap``1(System.Int32,System.Collections.Generic.IEqualityComparer{``0})"/>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.EitherBuilder.AsMultiMap``1(System.Collections.Generic.IEqualityComparer{``0})">
            <inheritdoc cref="M:DefaultEcs.EntityQueryBuilder.AsMultiMap``1(System.Collections.Generic.IEqualityComparer{``0})"/>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.EitherBuilder.AsMultiMap``1(System.Int32)">
            <inheritdoc cref="M:DefaultEcs.EntityQueryBuilder.AsMultiMap``1(System.Int32)"/>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.EitherBuilder.AsMultiMap``1">
            <inheritdoc cref="M:DefaultEcs.EntityQueryBuilder.AsMultiMap``1"/>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.With``1">
            <summary>
            Makes a rule to observe <see cref="T:DefaultEcs.Entity"/> with a component of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of component.</typeparam>
            <returns>The current <see cref="T:DefaultEcs.EntityQueryBuilder"/>.</returns>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.With``1(DefaultEcs.ComponentPredicate{``0})">
            <summary>
            Makes a rule to observe <see cref="T:DefaultEcs.Entity"/> with a component of type <typeparamref name="T"/> validating the given <see cref="T:DefaultEcs.ComponentPredicate`1"/>.
            </summary>
            <typeparam name="T">The type of component.</typeparam>
            <param name="predicate">The <see cref="T:DefaultEcs.ComponentPredicate`1"/> which needs to be validated.</param>
            <returns>The current <see cref="T:DefaultEcs.EntityQueryBuilder"/>.</returns>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.Without``1">
            <summary>
            Makes a rule to ignore <see cref="T:DefaultEcs.Entity"/> with a component of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of component.</typeparam>
            <returns>The current <see cref="T:DefaultEcs.EntityQueryBuilder"/>.</returns>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.WhenAdded``1">
            <summary>
            Makes a rule to observe <see cref="T:DefaultEcs.Entity"/> when a component of type <typeparamref name="T"/> is added.
            </summary>
            <typeparam name="T">The type of component.</typeparam>
            <returns>The current <see cref="T:DefaultEcs.EntityQueryBuilder"/>.</returns>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.WhenChanged``1">
            <summary>
            Makes a rule to observe <see cref="T:DefaultEcs.Entity"/> when a component of type <typeparamref name="T"/> is changed.
            </summary>
            <typeparam name="T">The type of component.</typeparam>
            <returns>The current <see cref="T:DefaultEcs.EntityQueryBuilder"/>.</returns>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.WhenRemoved``1">
            <summary>
            Makes a rule to observe <see cref="T:DefaultEcs.Entity"/> when a component of type <typeparamref name="T"/> is removed.
            </summary>
            <typeparam name="T">The type of component.</typeparam>
            <returns>The current <see cref="T:DefaultEcs.EntityQueryBuilder"/>.</returns>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.WithEither``1">
            <summary>
            Makes a rule to obsverve <see cref="T:DefaultEcs.Entity"/> with at least one component of the either group.
            </summary>
            <typeparam name="T">The type of component to add to the either group.</typeparam>
            <returns>A <see cref="T:DefaultEcs.EntityQueryBuilder.EitherBuilder"/> to create a either group.</returns>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.WithoutEither``1">
            <summary>
            Makes a rule to obsverve <see cref="T:DefaultEcs.Entity"/> without at least one component of the either group.
            </summary>
            <typeparam name="T">The type of component to add to the either group.</typeparam>
            <returns>A <see cref="T:DefaultEcs.EntityQueryBuilder.EitherBuilder"/> to create a either group.</returns>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.WhenAddedEither``1">
            <summary>
            Makes a rule to observe <see cref="T:DefaultEcs.Entity"/> when one component of the either group is added.
            </summary>
            <typeparam name="T">The type of component to add to the either group.</typeparam>
            <returns>A <see cref="T:DefaultEcs.EntityQueryBuilder.EitherBuilder"/> to create a either group.</returns>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.WhenChangedEither``1">
            <summary>
            Makes a rule to observe <see cref="T:DefaultEcs.Entity"/> when one component of the either group is changed.
            </summary>
            <typeparam name="T">The type of component to add to the either group.</typeparam>
            <returns>A <see cref="T:DefaultEcs.EntityQueryBuilder.EitherBuilder"/> to create a either group.</returns>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.WhenRemovedEither``1">
            <summary>
            Makes a rule to observe <see cref="T:DefaultEcs.Entity"/> when one component of the either group is removed.
            </summary>
            <typeparam name="T">The type of component to add to the either group.</typeparam>
            <returns>A <see cref="T:DefaultEcs.EntityQueryBuilder.EitherBuilder"/> to create a either group.</returns>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.Copy">
            <summary>
            Copies all the rules of the current <see cref="T:DefaultEcs.EntityQueryBuilder"/> to a new instance.
            </summary>
            <returns>A new <see cref="T:DefaultEcs.EntityQueryBuilder"/> with all the same rules as the current instance.</returns>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.AsPredicate">
            <summary>
            Returns a <see cref="T:System.Predicate`1"/> representing the specified rules.
            </summary>
            <returns>The <see cref="T:System.Predicate`1"/>.</returns>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.AsEnumerable">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:DefaultEcs.Entity"/> with the specified rules.
            </summary>
            <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:DefaultEcs.Entity"/>.</returns>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.AsSet">
            <summary>
            Returns an <see cref="T:DefaultEcs.EntitySet"/> with the specified rules.
            </summary>
            <returns>The <see cref="T:DefaultEcs.EntitySet"/>.</returns>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.AsSortedSet``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns an <see cref="T:DefaultEcs.EntitySortedSet`1"/> with the specified rules.
            </summary>
            <typeparam name="TComponent">The component type by which <see cref="T:DefaultEcs.Entity"/> will be sorted.</typeparam>
            <param name="comparer">The custom <see cref="T:System.Collections.Generic.IComparer`1"/> to use to sort <see cref="T:DefaultEcs.Entity"/>.</param>
            <returns>The <see cref="T:DefaultEcs.EntitySortedSet`1"/>.</returns>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.AsSortedSet``1">
            <summary>
            Returns an <see cref="T:DefaultEcs.EntitySortedSet`1"/> with the specified rules.
            </summary>
            <typeparam name="TComponent">The component type by which <see cref="T:DefaultEcs.Entity"/> will be sorted.</typeparam>
            <returns>The <see cref="T:DefaultEcs.EntitySortedSet`1"/>.</returns>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.AsMap``1(System.Int32,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns an <see cref="T:DefaultEcs.EntityMap`1"/> with the specified rules.
            </summary>
            <typeparam name="TKey">The component type to use as key.</typeparam>
            <param name="capacity">The initial number of element the <see cref="T:DefaultEcs.EntityMap`1"/> can contain.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or null to use the default <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> for the type of the key.</param>
            <returns>The <see cref="T:DefaultEcs.EntityMap`1"/>.</returns>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.AsMap``1(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns an <see cref="T:DefaultEcs.EntityMap`1"/> with the specified rules.
            </summary>
            <typeparam name="TKey">The component type to use as key.</typeparam>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or null to use the default <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> for the type of the key.</param>
            <returns>The <see cref="T:DefaultEcs.EntityMap`1"/>.</returns>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.AsMap``1(System.Int32)">
            <summary>
            Returns an <see cref="T:DefaultEcs.EntityMap`1"/> with the specified rules.
            </summary>
            <typeparam name="TKey">The component type to use as key.</typeparam>
            <param name="capacity">The initial number of element the <see cref="T:DefaultEcs.EntityMap`1"/> can contain.</param>
            <returns>The <see cref="T:DefaultEcs.EntityMap`1"/>.</returns>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.AsMap``1">
            <summary>
            Returns an <see cref="T:DefaultEcs.EntityMap`1"/> with the specified rules.
            </summary>
            <typeparam name="TKey">The component type to use as key.</typeparam>
            <returns>The <see cref="T:DefaultEcs.EntityMap`1"/>.</returns>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.AsMultiMap``1(System.Int32,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns an <see cref="T:DefaultEcs.EntityMultiMap`1"/> with the specified rules.
            </summary>
            <typeparam name="TKey">The component type to use as key.</typeparam>
            <param name="capacity">The initial number of element the <see cref="T:DefaultEcs.EntityMultiMap`1"/> can contain.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or null to use the default <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> for the type of the key.</param>
            <returns>The <see cref="T:DefaultEcs.EntityMultiMap`1"/>.</returns>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.AsMultiMap``1(System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns an <see cref="T:DefaultEcs.EntityMultiMap`1"/> with the specified rules.
            </summary>
            <typeparam name="TKey">The component type to use as key.</typeparam>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or null to use the default <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> for the type of the key.</param>
            <returns>The <see cref="T:DefaultEcs.EntityMultiMap`1"/>.</returns>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.AsMultiMap``1(System.Int32)">
            <summary>
            Returns an <see cref="T:DefaultEcs.EntityMultiMap`1"/> with the specified rules.
            </summary>
            <typeparam name="TKey">The component type to use as key.</typeparam>
            <param name="capacity">The initial number of element the <see cref="T:DefaultEcs.EntityMultiMap`1"/> can contain.</param>
            <returns>The <see cref="T:DefaultEcs.EntityMultiMap`1"/>.</returns>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilder.AsMultiMap``1">
            <summary>
            Returns an <see cref="T:DefaultEcs.EntityMultiMap`1"/> with the specified rules.
            </summary>
            <typeparam name="TKey">The component type to use as key.</typeparam>
            <returns>The <see cref="T:DefaultEcs.EntityMultiMap`1"/>.</returns>
        </member>
        <member name="T:DefaultEcs.EntityQueryBuilderExtension">
            <summary>
            Provides set of static methods to create more easily rules on a <see cref="T:DefaultEcs.EntityQueryBuilder"/> instance.
            </summary>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilderExtension.With(DefaultEcs.EntityQueryBuilder,System.Type[])">
            <summary>
            Makes a rule to obsverve <see cref="T:DefaultEcs.Entity"/> with all component of the given types.
            </summary>
            <param name="builder">The <see cref="T:DefaultEcs.EntityQueryBuilder"/> on which to create the rule.</param>
            <param name="componentTypes">The types of component.</param>
            <returns>The current <see cref="T:DefaultEcs.EntityQueryBuilder"/>.</returns>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilderExtension.Without(DefaultEcs.EntityQueryBuilder,System.Type[])">
            <summary>
            Makes a rule to ignore <see cref="T:DefaultEcs.Entity"/> with at least one component of the given types.
            </summary>
            <param name="builder">The <see cref="T:DefaultEcs.EntityQueryBuilder"/> on which to create the rule.</param>
            <param name="componentTypes">The types of component.</param>
            <returns>The current <see cref="T:DefaultEcs.EntityQueryBuilder"/>.</returns>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilderExtension.WhenAdded(DefaultEcs.EntityQueryBuilder,System.Type[])">
            <summary>
            Makes a rule to obsverve <see cref="T:DefaultEcs.Entity"/> when all component of the given types are added.
            </summary>
            <param name="builder">The <see cref="T:DefaultEcs.EntityQueryBuilder"/> on which to create the rule.</param>
            <param name="componentTypes">The types of component.</param>
            <returns>The current <see cref="T:DefaultEcs.EntityQueryBuilder"/>.</returns>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilderExtension.WhenChanged(DefaultEcs.EntityQueryBuilder,System.Type[])">
            <summary>
            Makes a rule to obsverve <see cref="T:DefaultEcs.Entity"/> when all component of the given types are changed.
            </summary>
            <param name="builder">The <see cref="T:DefaultEcs.EntityQueryBuilder"/> on which to create the rule.</param>
            <param name="componentTypes">The types of component.</param>
            <returns>The current <see cref="T:DefaultEcs.EntityQueryBuilder"/>.</returns>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilderExtension.WhenRemoved(DefaultEcs.EntityQueryBuilder,System.Type[])">
            <summary>
            Makes a rule to obsverve <see cref="T:DefaultEcs.Entity"/> when all component of the given types are removed.
            </summary>
            <param name="builder">The <see cref="T:DefaultEcs.EntityQueryBuilder"/> on which to create the rule.</param>
            <param name="componentTypes">The types of component.</param>
            <returns>The current <see cref="T:DefaultEcs.EntityQueryBuilder"/>.</returns>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilderExtension.WithEither(DefaultEcs.EntityQueryBuilder,System.Type[])">
            <summary>
            Makes a rule to obsverve <see cref="T:DefaultEcs.Entity"/> with at least one component of the given types.
            </summary>
            <param name="builder">The <see cref="T:DefaultEcs.EntityQueryBuilder"/> on which to create the rule.</param>
            <param name="componentTypes">The types of component.</param>
            <returns>The current <see cref="T:DefaultEcs.EntityQueryBuilder"/>.</returns>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilderExtension.WithoutEither(DefaultEcs.EntityQueryBuilder,System.Type[])">
            <summary>
            Makes a rule to obsverve <see cref="T:DefaultEcs.Entity"/> without at least one component of the given types.
            </summary>
            <param name="builder">The <see cref="T:DefaultEcs.EntityQueryBuilder"/> on which to create the rule.</param>
            <param name="componentTypes">The types of component.</param>
            <returns>The current <see cref="T:DefaultEcs.EntityQueryBuilder"/>.</returns>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilderExtension.WhenAddedEither(DefaultEcs.EntityQueryBuilder,System.Type[])">
            <summary>
            Makes a rule to observe <see cref="T:DefaultEcs.Entity"/> when one component of the given types is added.
            </summary>
            <param name="builder">The <see cref="T:DefaultEcs.EntityQueryBuilder"/> on which to create the rule.</param>
            <param name="componentTypes">The types of component.</param>
            <returns>The current <see cref="T:DefaultEcs.EntityQueryBuilder"/>.</returns>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilderExtension.WhenChangedEither(DefaultEcs.EntityQueryBuilder,System.Type[])">
            <summary>
            Makes a rule to observe <see cref="T:DefaultEcs.Entity"/> when one component of the given types is changed.
            </summary>
            <param name="builder">The <see cref="T:DefaultEcs.EntityQueryBuilder"/> on which to create the rule.</param>
            <param name="componentTypes">The types of component.</param>
            <returns>The current <see cref="T:DefaultEcs.EntityQueryBuilder"/>.</returns>
        </member>
        <member name="M:DefaultEcs.EntityQueryBuilderExtension.WhenRemovedEither(DefaultEcs.EntityQueryBuilder,System.Type[])">
            <summary>
            Makes a rule to observe <see cref="T:DefaultEcs.Entity"/> when one component of the given types is removed.
            </summary>
            <param name="builder">The <see cref="T:DefaultEcs.EntityQueryBuilder"/> on which to create the rule.</param>
            <param name="componentTypes">The types of component.</param>
            <returns>The current <see cref="T:DefaultEcs.EntityQueryBuilder"/>.</returns>
        </member>
        <member name="T:DefaultEcs.EntitySet">
            <summary>
            Represents a sub-selection of <see cref="T:DefaultEcs.Entity"/> instances from a <see cref="P:DefaultEcs.EntitySet.World"/>.
            </summary>
        </member>
        <member name="P:DefaultEcs.EntitySet.Count">
            <summary>
            Gets the number of <see cref="T:DefaultEcs.Entity"/> in the current <see cref="T:DefaultEcs.EntitySet"/>.
            </summary>
        </member>
        <member name="M:DefaultEcs.EntitySet.GetEntities">
            <summary>
            Gets the <see cref="T:DefaultEcs.Entity"/> contained in the current <see cref="T:DefaultEcs.EntitySet"/>.
            </summary>
            <returns>A <see cref="T:System.ReadOnlySpan`1"/> of the <see cref="T:DefaultEcs.Entity"/> contained in the current <see cref="T:DefaultEcs.EntitySet"/>.</returns>
        </member>
        <member name="P:DefaultEcs.EntitySet.World">
            <inheritdoc/>
        </member>
        <member name="E:DefaultEcs.EntitySet.EntityAdded">
            <inheritdoc/>
        </member>
        <member name="E:DefaultEcs.EntitySet.EntityRemoved">
            <inheritdoc/>
        </member>
        <member name="M:DefaultEcs.EntitySet.Contains(DefaultEcs.Entity@)">
            <inheritdoc/>
        </member>
        <member name="M:DefaultEcs.EntitySet.Complete">
            <inheritdoc/>
        </member>
        <member name="M:DefaultEcs.EntitySet.TrimExcess">
            <inheritdoc/>
        </member>
        <member name="M:DefaultEcs.EntitySet.Dispose">
            <summary>
            Releases current <see cref="T:DefaultEcs.EntitySet"/> of its subscriptions, stopping it to get modifications on the <see cref="P:DefaultEcs.EntitySet.World"/>'s <see cref="T:DefaultEcs.Entity"/>.
            </summary>
        </member>
        <member name="T:DefaultEcs.EntitySortedSet`1">
            <summary>
            Represents a sub-selection of <see cref="T:DefaultEcs.Entity"/> instances from a <see cref="P:DefaultEcs.EntitySortedSet`1.World"/> sorted by a specific component.
            </summary>
            <typeparam name="TComponent">The type of the component to sort <see cref="T:DefaultEcs.Entity"/> by.</typeparam>
        </member>
        <member name="P:DefaultEcs.EntitySortedSet`1.Count">
            <summary>
            Gets the number of <see cref="T:DefaultEcs.Entity"/> in the current <see cref="T:DefaultEcs.EntitySortedSet`1"/>.
            </summary>
        </member>
        <member name="M:DefaultEcs.EntitySortedSet`1.GetEntities">
            <summary>
            Gets the <see cref="T:DefaultEcs.Entity"/> contained in the current <see cref="T:DefaultEcs.EntitySortedSet`1"/>.
            </summary>
            <returns>A <see cref="T:System.ReadOnlySpan`1"/> of the <see cref="T:DefaultEcs.Entity"/> contained in the current <see cref="T:DefaultEcs.EntitySortedSet`1"/>.</returns>
        </member>
        <member name="P:DefaultEcs.EntitySortedSet`1.World">
            <inheritdoc/>
        </member>
        <member name="E:DefaultEcs.EntitySortedSet`1.EntityAdded">
            <inheritdoc/>
        </member>
        <member name="E:DefaultEcs.EntitySortedSet`1.EntityRemoved">
            <inheritdoc/>
        </member>
        <member name="M:DefaultEcs.EntitySortedSet`1.Contains(DefaultEcs.Entity@)">
            <inheritdoc/>
        </member>
        <member name="M:DefaultEcs.EntitySortedSet`1.Complete">
            <inheritdoc/>
        </member>
        <member name="M:DefaultEcs.EntitySortedSet`1.TrimExcess">
            <inheritdoc/>
        </member>
        <member name="M:DefaultEcs.EntitySortedSet`1.Dispose">
            <summary>
            Releases current <see cref="T:DefaultEcs.EntitySortedSet`1"/> of its subscriptions, stopping it to get modifications on the <see cref="P:DefaultEcs.EntitySortedSet`1.World"/>'s <see cref="T:DefaultEcs.Entity"/>.
            </summary>
        </member>
        <member name="P:DefaultEcs.IEntityContainer.World">
            <summary>
            Gets the <see cref="T:DefaultEcs.World"/> instance from which current <see cref="T:DefaultEcs.IEntityContainer"/> originate.
            </summary>
        </member>
        <member name="E:DefaultEcs.IEntityContainer.EntityAdded">
            <summary>
            Occurs when an <see cref="T:DefaultEcs.Entity"/> is added in the current <see cref="T:DefaultEcs.IEntityContainer"/>.
            </summary>
        </member>
        <member name="E:DefaultEcs.IEntityContainer.EntityRemoved">
            <summary>
            Occurs when an <see cref="T:DefaultEcs.Entity"/> is removed from the current <see cref="T:DefaultEcs.IEntityContainer"/>.
            </summary>
        </member>
        <member name="M:DefaultEcs.IEntityContainer.Contains(DefaultEcs.Entity@)">
            <summary>
            Determines whether the <see cref="T:DefaultEcs.IEntityContainer"/> contains a specific <see cref="T:DefaultEcs.Entity"/>.
            </summary>
            <param name="entity">The <see cref="T:DefaultEcs.Entity"/> to locate in the <see cref="T:DefaultEcs.IEntityContainer"/>.</param>
            <returns>true if the <see cref="T:DefaultEcs.IEntityContainer"/> contains the specified <see cref="T:DefaultEcs.Entity"/>; otherwise, false.</returns>
        </member>
        <member name="M:DefaultEcs.IEntityContainer.Complete">
            <summary>
            Clears current instance of its entities if it was created with some reactive filter (<see cref="M:DefaultEcs.EntityQueryBuilder.WhenAdded``1"/>, <see cref="M:DefaultEcs.EntityQueryBuilder.WhenChanged``1"/> or <see cref="M:DefaultEcs.EntityQueryBuilder.WhenRemoved``1"/>).
            Does nothing if it was created from a static filter.
            This method need to be called after current instance content has been processed in a update cycle.
            </summary>
        </member>
        <member name="M:DefaultEcs.IEntityContainer.TrimExcess">
            <summary>
            Resizes inner storage to exactly the number of <see cref="T:DefaultEcs.Entity"/> this <see cref="T:DefaultEcs.IEntityContainer"/> contains.
            </summary>
        </member>
        <member name="T:DefaultEcs.IPublisher">
            <summary>
            Exposes methods to subscribe to <see cref="T:DefaultEcs.MessageHandler`1"/> and publish message to callback those subscriptions.
            </summary>
        </member>
        <member name="M:DefaultEcs.IPublisher.Subscribe``1(DefaultEcs.MessageHandler{``0})">
            <summary>
            Subscribes an <see cref="T:DefaultEcs.MessageHandler`1"/> to be called back when a <typeparamref name="T"/> object is published.
            </summary>
            <typeparam name="T">The type of the object to be called back with.</typeparam>
            <param name="action">The delegate to be called back.</param>
            <returns>An <see cref="T:System.IDisposable"/> object used to unsubscribe.</returns>
        </member>
        <member name="M:DefaultEcs.IPublisher.Publish``1(``0@)">
            <summary>
            Publishes a <typeparamref name="T"/> object.
            </summary>
            <typeparam name="T">The type of the object to publish.</typeparam>
            <param name="message">The object to publish.</param>
        </member>
        <member name="T:DefaultEcs.SubscribeAttribute">
            <summary>
            Specifies that the method should be automatically subscribed when its parent type or instance is called with <see cref="T:DefaultEcs.IPublisherExtension"/>.
            The decorated method should be of the type <see cref="T:DefaultEcs.MessageHandler`1"/>.
            </summary>
        </member>
        <member name="T:DefaultEcs.IPublisherExtension">
            <summary>
            Provides set of static methods to automatically subscribe <see cref="T:DefaultEcs.MessageHandler`1"/> methods marked with the <see cref="T:DefaultEcs.SubscribeAttribute"/> on a <see cref="T:DefaultEcs.IPublisher"/> instance.
            </summary>
        </member>
        <member name="M:DefaultEcs.IPublisherExtension.Subscribe(DefaultEcs.IPublisher,System.Type)">
            <summary>
            Subscribes automatically methods of a Type marked with the <see cref="T:DefaultEcs.SubscribeAttribute"/> on an <see cref="T:DefaultEcs.IPublisher"/> instance.
            </summary>
            <param name="publisher">The <see cref="T:DefaultEcs.IPublisher"/> instance.</param>
            <param name="type">The type.</param>
            <returns>A <see cref="T:System.IDisposable"/> to unregister.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="publisher"/> or <paramref name="type"/> is null.</exception>
            <exception cref="T:System.NotSupportedException"><see cref="T:DefaultEcs.SubscribeAttribute"/> is used on an uncompatible method of the instance.</exception>
        </member>
        <member name="M:DefaultEcs.IPublisherExtension.Subscribe``1(DefaultEcs.IPublisher)">
            <summary>
            Subscribes automatically methods of a Type marked with the <see cref="T:DefaultEcs.SubscribeAttribute"/> on an <see cref="T:DefaultEcs.IPublisher"/> instance.
            </summary>
            <typeparam name="T">The Type.</typeparam>
            <param name="publisher">The <see cref="T:DefaultEcs.IPublisher"/> instance.</param>
            <returns>A <see cref="T:System.IDisposable"/> to unregister.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="publisher"/> is null.</exception>
            <exception cref="T:System.NotSupportedException"><see cref="T:DefaultEcs.SubscribeAttribute"/> is used on an uncompatible method of the instance.</exception>
        </member>
        <member name="M:DefaultEcs.IPublisherExtension.Subscribe``1(DefaultEcs.IPublisher,``0)">
            <summary>
            Subscribes automatically methods of an instance and its Type marked with the <see cref="T:DefaultEcs.SubscribeAttribute"/> on an <see cref="T:DefaultEcs.IPublisher"/> instance.
            </summary>
            <typeparam name="T">The Type.</typeparam>
            <param name="publisher">The <see cref="T:DefaultEcs.IPublisher"/> instance.</param>
            <param name="target">The instance.</param>
            <returns>A <see cref="T:System.IDisposable"/> to unregister.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="publisher"/> or <paramref name="target"/> is null.</exception>
            <exception cref="T:System.NotSupportedException"><see cref="T:DefaultEcs.SubscribeAttribute"/> is used on an uncompatible method of the instance.</exception>
        </member>
        <member name="T:DefaultEcs.World">
            <summary>
            Represents a item used to create and manage <see cref="T:DefaultEcs.Entity"/> objects.
            </summary>
        </member>
        <member name="T:DefaultEcs.World.Enumerator">
            <summary>
            Enumerates the <see cref="T:DefaultEcs.Entity"/> of a <see cref="T:DefaultEcs.World" />.
            </summary>
        </member>
        <member name="P:DefaultEcs.World.Enumerator.Current">
            <summary>
            Gets the <see cref="T:DefaultEcs.Entity"/> at the current position of the enumerator.
            </summary>
            <returns>The <see cref="T:DefaultEcs.Entity"/> in the <see cref="T:DefaultEcs.World" /> at the current position of the enumerator.</returns>
        </member>
        <member name="P:DefaultEcs.World.Enumerator.System#Collections#IEnumerator#Current">
            <inheritdoc cref="P:DefaultEcs.World.Enumerator.Current" />
        </member>
        <member name="M:DefaultEcs.World.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next <see cref="T:DefaultEcs.Entity"/> of the <see cref="T:DefaultEcs.World" />.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next <see cref="T:DefaultEcs.Entity"/>; false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:DefaultEcs.World.Enumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first <see cref="T:DefaultEcs.Entity"/> in the collection.
            </summary>
        </member>
        <member name="M:DefaultEcs.World.Enumerator.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:DefaultEcs.World.Enumerator" />.
            </summary>
        </member>
        <member name="P:DefaultEcs.World.MaxCapacity">
            <summary>
            Gets the maximum number of <see cref="T:DefaultEcs.Entity"/> this <see cref="T:DefaultEcs.World"/> can handle.
            </summary>
        </member>
        <member name="M:DefaultEcs.World.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DefaultEcs.World"/> class.
            </summary>
            <param name="maxCapacity">The maximum number of <see cref="T:DefaultEcs.Entity"/> that can exist in this <see cref="T:DefaultEcs.World"/>.</param>
            <exception cref="T:System.ArgumentException"><paramref name="maxCapacity"/> cannot be negative.</exception>
        </member>
        <member name="M:DefaultEcs.World.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DefaultEcs.World"/> class.
            </summary>
        </member>
        <member name="M:DefaultEcs.World.CreateEntity">
            <summary>
            Creates a new instance of the <see cref="T:DefaultEcs.Entity"/> struct.
            This method is not thread safe.
            </summary>
            <returns>The created <see cref="T:DefaultEcs.Entity"/>.</returns>
            <exception cref="T:System.InvalidOperationException">Max number of <see cref="T:DefaultEcs.Entity"/> reached.</exception>
        </member>
        <member name="M:DefaultEcs.World.SetMaxCapacity``1(System.Int32)">
            <summary>
            Sets up the current <see cref="T:DefaultEcs.World"/> to handle component of type <typeparamref name="T"/> with a different maximum count than <see cref="P:DefaultEcs.World.MaxCapacity"/>.
            If the type of component is already handled by the current <see cref="T:DefaultEcs.World"/>, does nothing.
            This method is not thread safe.
            </summary>
            <typeparam name="T">The type of component.</typeparam>
            <param name="maxCapacity">The maximum number of component of type <typeparamref name="T"/> that can exist in this <see cref="T:DefaultEcs.World"/>.</param>
            <returns>Whether the maximum count has been setted or not.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="maxCapacity"/> cannot be negative.</exception>
        </member>
        <member name="M:DefaultEcs.World.GetMaxCapacity``1">
            <summary>
            Gets the maximum number of <typeparamref name="T"/> components this <see cref="T:DefaultEcs.World"/> can create.
            </summary>
            <typeparam name="T">The type of component.</typeparam>
            <returns>The maximum number of <typeparamref name="T"/> components this <see cref="T:DefaultEcs.World"/> can create, or -1 if it is currently not handled.</returns>
        </member>
        <member name="M:DefaultEcs.World.GetAll``1">
            <summary>
            Gets all the component of a given type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of component.</typeparam>
            <returns>A <see cref="T:System.Span`1"/> pointing directly to the component values to edit them.</returns>
        </member>
        <member name="M:DefaultEcs.World.GetComponents``1">
            <summary>
            Gets an <see cref="T:DefaultEcs.Components`1"/> to get a fast access to the component of type <typeparamref name="T"/> of this <see cref="T:DefaultEcs.World"/> instance <see cref="T:DefaultEcs.Entity"/>.
            </summary>
            <typeparam name="T">The type of component.</typeparam>
            <returns>A <see cref="T:DefaultEcs.Components`1"/>.</returns>
        </member>
        <member name="M:DefaultEcs.World.Set``1(``0@)">
            <summary>
            Sets the value of the component of type <typeparamref name="T"/> on the current <see cref="T:DefaultEcs.World"/>.
            This method is not thread safe.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <param name="component">The value of the component.</param>
            <exception cref="T:System.InvalidOperationException">Max number of component of type <typeparamref name="T"/> reached.</exception>
        </member>
        <member name="M:DefaultEcs.World.Set``1">
            <summary>
            Sets the value of the component of type <typeparamref name="T"/> to its default value on the current <see cref="T:DefaultEcs.World"/>.
            This method is not thread safe.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <exception cref="T:System.InvalidOperationException">Max number of component of type <typeparamref name="T"/> reached.</exception>
        </member>
        <member name="M:DefaultEcs.World.Has``1">
            <summary>
            Returns whether the current <see cref="T:DefaultEcs.World"/> has a component of type <typeparamref name="T"/>.
            It has nothing to do whether or not the current <see cref="T:DefaultEcs.World"/> instance has an <see cref="T:DefaultEcs.Entity"/> with a component of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <returns>true if the <see cref="T:DefaultEcs.World"/> has a component of type <typeparamref name="T"/>; otherwise, false.</returns>
        </member>
        <member name="M:DefaultEcs.World.Get``1">
            <summary>
            Gets the component of type <typeparamref name="T"/> on the current <see cref="T:DefaultEcs.World"/>.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <returns>A reference to the component.</returns>
            <exception cref="T:System.Exception"><see cref="T:DefaultEcs.World"/> does not have a component of type <typeparamref name="T"/>.</exception>
        </member>
        <member name="M:DefaultEcs.World.Remove``1">
            <summary>
            Removes the component of type <typeparamref name="T"/> on the current <see cref="T:DefaultEcs.World"/>.
            This method is not thread safe.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
        </member>
        <member name="M:DefaultEcs.World.GetEntities">
            <summary>
            Gets an <see cref="T:DefaultEcs.EntityQueryBuilder"/> to create a subset of <see cref="T:DefaultEcs.Entity"/> of the current <see cref="T:DefaultEcs.World"/>.
            </summary>
            <returns>An <see cref="T:DefaultEcs.EntityQueryBuilder"/>.</returns>
        </member>
        <member name="M:DefaultEcs.World.GetDisabledEntities">
            <summary>
            Gets an <see cref="T:DefaultEcs.EntityQueryBuilder"/> to create a subset of disabled <see cref="T:DefaultEcs.Entity"/> of the current <see cref="T:DefaultEcs.World"/>.
            </summary>
            <returns>An <see cref="T:DefaultEcs.EntityQueryBuilder"/>.</returns>
        </member>
        <member name="M:DefaultEcs.World.ReadAllComponentTypes(DefaultEcs.Serialization.IComponentTypeReader)">
            <summary>
            Calls on <paramref name="reader"/> with all the maximum number of component of the current <see cref="T:DefaultEcs.World"/>.
            This method is primiraly used for serialization purpose and should not be called in game logic.
            </summary>
            <param name="reader">The <see cref="T:DefaultEcs.Serialization.IComponentTypeReader"/> instance to be used as callback with the current <see cref="T:DefaultEcs.World"/> maximum number of component.</param>
        </member>
        <member name="M:DefaultEcs.World.Optimize(DefaultEcs.Threading.IParallelRunner,System.Action)">
            <summary>
            Sorts current instance inner storage so accessing <see cref="T:DefaultEcs.Entity"/> and their components from <see cref="T:DefaultEcs.EntitySet"/> and <see cref="T:DefaultEcs.EntityMultiMap`1"/> always move forward in memory.
            This method will return once <paramref name="mainAction"/> is executed even if the optimization process has not finished.
            This method is not thread safe.
            </summary>
            <param name="runner">The <see cref="T:DefaultEcs.Threading.IParallelRunner"/> to process this operation in parallel.</param>
            <param name="mainAction">An <see cref="T:System.Action"/> to execute on the main thread while the optimization is in process.</param>
        </member>
        <member name="M:DefaultEcs.World.Optimize(DefaultEcs.Threading.IParallelRunner)">
            <summary>
            Sorts current instance inner storage so accessing <see cref="T:DefaultEcs.Entity"/> and their components from <see cref="T:DefaultEcs.EntitySet"/> and <see cref="T:DefaultEcs.EntityMultiMap`1"/> always move forward in memory.
            This method is not thread safe.
            </summary>
            <param name="runner">The <see cref="T:DefaultEcs.Threading.IParallelRunner"/> to process this operation in parallel.</param>
        </member>
        <member name="M:DefaultEcs.World.Optimize">
            <summary>
            Sorts current instance inner storage so accessing <see cref="T:DefaultEcs.Entity"/> and their components from <see cref="T:DefaultEcs.EntitySet"/> and <see cref="T:DefaultEcs.EntityMultiMap`1"/> always move forward in memory.
            This method is not thread safe.
            </summary>
        </member>
        <member name="M:DefaultEcs.World.TrimExcess``1">
            <summary>
            Resizes inner storage to exactly the number of <typeparamref name="T"/> components this <see cref="T:DefaultEcs.World"/> contains.
            This method is not thread safe.
            </summary>
        </member>
        <member name="M:DefaultEcs.World.TrimExcess">
            <summary>
            Resizes all inner storage to exactly the number of <see cref="T:DefaultEcs.Entity"/> and components this <see cref="T:DefaultEcs.World"/> contains.
            This method is not thread safe.
            </summary>
        </member>
        <member name="M:DefaultEcs.World.SubscribeWorldDisposed(DefaultEcs.WorldDisposedHandler)">
            <summary>
            Subscribes an <see cref="T:DefaultEcs.WorldDisposedHandler"/> on the current <see cref="T:DefaultEcs.World"/> to be called when current instance is disposed.
            </summary>
            <param name="action">The <see cref="T:DefaultEcs.WorldDisposedHandler"/> to be called.</param>
            <returns>An <see cref="T:System.IDisposable"/> object used to unsubscribe.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.World.SubscribeEntityCreated(DefaultEcs.EntityCreatedHandler)">
            <summary>
            Subscribes an <see cref="T:DefaultEcs.EntityCreatedHandler"/> on the current <see cref="T:DefaultEcs.World"/> to be called when an <see cref="T:DefaultEcs.Entity"/> is created.
            </summary>
            <param name="action">The <see cref="T:DefaultEcs.EntityCreatedHandler"/> to be called.</param>
            <returns>An <see cref="T:System.IDisposable"/> object used to unsubscribe.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.World.SubscribeEntityEnabled(DefaultEcs.EntityEnabledHandler)">
            <summary>
            Subscribes an <see cref="T:DefaultEcs.EntityEnabledHandler"/> on the current <see cref="T:DefaultEcs.World"/> to be called when an <see cref="T:DefaultEcs.Entity"/> is enabled.
            </summary>
            <param name="action">The <see cref="T:DefaultEcs.EntityEnabledHandler"/> to be called.</param>
            <returns>An <see cref="T:System.IDisposable"/> object used to unsubscribe.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.World.SubscribeEntityDisabled(DefaultEcs.EntityDisabledHandler)">
            <summary>
            Subscribes an <see cref="T:DefaultEcs.EntityDisabledHandler"/> on the current <see cref="T:DefaultEcs.World"/> to be called when an <see cref="T:DefaultEcs.Entity"/> is disabled.
            </summary>
            <param name="action">The <see cref="T:DefaultEcs.EntityDisabledHandler"/> to be called.</param>
            <returns>An <see cref="T:System.IDisposable"/> object used to unsubscribe.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.World.SubscribeEntityDisposed(DefaultEcs.EntityDisposedHandler)">
            <summary>
            Subscribes an <see cref="T:DefaultEcs.EntityDisposedHandler"/> on the current <see cref="T:DefaultEcs.World"/> to be called when an <see cref="T:DefaultEcs.Entity"/> is disposed.
            </summary>
            <param name="action">The <see cref="T:DefaultEcs.EntityDisposedHandler"/> to be called.</param>
            <returns>An <see cref="T:System.IDisposable"/> object used to unsubscribe.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.World.SubscribeComponentAdded``1(DefaultEcs.ComponentAddedHandler{``0})">
            <summary>
            Subscribes a <see cref="T:DefaultEcs.ComponentAddedHandler`1"/> on the current <see cref="T:DefaultEcs.World"/> to be called when a component of type <typeparamref name="T"/> is added.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <param name="action">The <see cref="T:DefaultEcs.ComponentAddedHandler`1"/> to be called.</param>
            <returns>An <see cref="T:System.IDisposable"/> object used to unsubscribe.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.World.SubscribeComponentChanged``1(DefaultEcs.ComponentChangedHandler{``0})">
            <summary>
            Subscribes a <see cref="T:DefaultEcs.ComponentChangedHandler`1"/> on the current <see cref="T:DefaultEcs.World"/> to be called when a component of type <typeparamref name="T"/> is changed.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <param name="action">The <see cref="T:DefaultEcs.ComponentChangedHandler`1"/> to be called.</param>
            <returns>An <see cref="T:System.IDisposable"/> object used to unsubscribe.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.World.SubscribeComponentRemoved``1(DefaultEcs.ComponentRemovedHandler{``0})">
            <summary>
            Subscribes an <see cref="T:DefaultEcs.ComponentRemovedHandler`1"/> on the current <see cref="T:DefaultEcs.World"/> to be called when a component of type <typeparamref name="T"/> is removed.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <param name="action">The <see cref="T:DefaultEcs.ComponentRemovedHandler`1"/> to be called.</param>
            <returns>An <see cref="T:System.IDisposable"/> object used to unsubscribe.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.World.SubscribeComponentEnabled``1(DefaultEcs.ComponentEnabledHandler{``0})">
            <summary>
            Subscribes a <see cref="T:DefaultEcs.ComponentEnabledHandler`1"/> on the current <see cref="T:DefaultEcs.World"/> to be called when a component of type <typeparamref name="T"/> is enabled.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <param name="action">The <see cref="T:DefaultEcs.ComponentEnabledHandler`1"/> to be called.</param>
            <returns>An <see cref="T:System.IDisposable"/> object used to unsubscribe.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.World.SubscribeComponentDisabled``1(DefaultEcs.ComponentDisabledHandler{``0})">
            <summary>
            Subscribes a <see cref="T:DefaultEcs.ComponentDisabledHandler`1"/> on the current <see cref="T:DefaultEcs.World"/> to be called when a component of type <typeparamref name="T"/> is disabled.
            </summary>
            <typeparam name="T">The type of the component.</typeparam>
            <param name="action">The <see cref="T:DefaultEcs.ComponentDisabledHandler`1"/> to be called.</param>
            <returns>An <see cref="T:System.IDisposable"/> object used to unsubscribe.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="action"/> is null.</exception>
        </member>
        <member name="M:DefaultEcs.World.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:DefaultEcs.Entity"/> of the current <see cref="T:DefaultEcs.World"/> instance.
            </summary>
            <returns>An enumerator that can be used to iterate through the <see cref="T:DefaultEcs.Entity"/>.</returns>
        </member>
        <member name="M:DefaultEcs.World.System#Collections#Generic#IEnumerable{DefaultEcs#Entity}#GetEnumerator">
            <inheritdoc cref="M:DefaultEcs.World.GetEnumerator" />
        </member>
        <member name="M:DefaultEcs.World.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc cref="M:DefaultEcs.World.GetEnumerator" />
        </member>
        <member name="M:DefaultEcs.World.Subscribe``1(DefaultEcs.MessageHandler{``0})">
            <summary>
            Subscribes an <see cref="T:DefaultEcs.MessageHandler`1"/> to be called back when a <typeparamref name="T"/> object is published.
            </summary>
            <typeparam name="T">The type of the object to be called back with.</typeparam>
            <param name="action">The delegate to be called back.</param>
            <returns>An <see cref="T:System.IDisposable"/> object used to unsubscribe.</returns>
        </member>
        <member name="M:DefaultEcs.World.Publish``1(``0@)">
            <summary>
            Publishes a <typeparamref name="T"/> object.
            </summary>
            <typeparam name="T">The type of the object to publish.</typeparam>
            <param name="message">The object to publish.</param>
        </member>
        <member name="M:DefaultEcs.World.Dispose">
            <summary>
            Cleans up all the components of existing <see cref="T:DefaultEcs.Entity"/>.
            The current <see cref="T:DefaultEcs.World"/>, all <see cref="T:DefaultEcs.Entity"/> and <see cref="T:DefaultEcs.EntitySet"/> created from this instance, should not be used again after calling this method.
            </summary>
        </member>
        <member name="M:DefaultEcs.World.ToString">
            <summary>
            Returns a string representation of this instance.
            </summary>
            <returns>A string representing this instance.</returns>
        </member>
    </members>
</doc>
